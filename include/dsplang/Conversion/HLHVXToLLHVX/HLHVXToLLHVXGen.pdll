// GENERATED BY scripts/gen_hvxops.py - DO NOT EDIT MANUALLY

Pattern Rewrite_vextract_R_VR {
    let root = op<hlhvx.vextract.R.VR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.extractw_128B>(arg2, arg1) -> (type<"i32">);
        let arg4 = op<hlhvx.CastIntegerFromGeneric>(arg3);
        replace root with arg4;
    };
}

Pattern Rewrite_hi_V_W {
    let root = op<hlhvx.hi.V.W>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg2 = op<llhvx.intr.hi_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg3;
    };
}

Pattern Rewrite_lo_V_W {
    let root = op<hlhvx.lo.V.W>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg2 = op<llhvx.intr.lo_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vsplat_V_R {
    let root = op<hlhvx.vsplat.V.R>(arg0: Value);

    rewrite root with {
        let arg1 = op<llhvx.intr.lvsplatw_128B>(arg0) -> (type<"vector<32 x i32>">);
        let arg2 = op<hlhvx.CastVectorFromGeneric>(arg1) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg2;
    };
}

Pattern Rewrite_and_Q_QQ {
    let root = op<hlhvx.and.Q.QQ>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.pred_and_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_and_Q_QQn {
    let root = op<hlhvx.and.Q.QQn>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.pred_and_n_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_not_Q_Q {
    let root = op<hlhvx.not.Q.Q>(arg0: Value);

    rewrite root with {
        let arg1 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg2 = op<llhvx.intr.vandvrt_128B>(arg0, arg1) -> (type<"vector<128 x i1>">);
        let arg3 = op<llhvx.intr.pred_not_128B>(arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandqrt_128B>(arg3, arg1) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_or_Q_QQ {
    let root = op<hlhvx.or.Q.QQ>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.pred_or_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_or_Q_QQn {
    let root = op<hlhvx.or.Q.QQn>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.pred_or_n_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vsetq_Q_R {
    let root = op<hlhvx.vsetq.Q.R>(arg0: Value);

    rewrite root with {
        let arg1 = op<llhvx.intr.pred_scalar2_128B>(arg0) -> (type<"vector<128 x i1>">);
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandqrt_128B>(arg1, arg2) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg4;
    };
}

Pattern Rewrite_xor_Q_QQ {
    let root = op<hlhvx.xor.Q.QQ>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.pred_xor_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmem_QnRIV {
    let root = op<hlhvx.vmem.QnRIV>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vS32b_nqpred_ai_128B>(arg4, arg1, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vmem_QnRIV_nt {
    let root = op<hlhvx.vmem.QnRIV.nt>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vS32b_nt_nqpred_ai_128B>(arg4, arg1, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vmem_QRIV_nt {
    let root = op<hlhvx.vmem.QRIV.nt>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vS32b_nt_qpred_ai_128B>(arg4, arg1, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vmem_QRIV {
    let root = op<hlhvx.vmem.QRIV>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vS32b_qpred_ai_128B>(arg4, arg1, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vabsdiff_Vuh_VhVh {
    let root = op<hlhvx.vabsdiff.Vuh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vabsdiffh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vabsdiff_Vub_VubVub {
    let root = op<hlhvx.vabsdiff.Vub.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vabsdiffub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vabsdiff_Vuh_VuhVuh {
    let root = op<hlhvx.vabsdiff.Vuh.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vabsdiffuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vabsdiff_Vuw_VwVw {
    let root = op<hlhvx.vabsdiff.Vuw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vabsdiffw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vabs_Vh_Vh {
    let root = op<hlhvx.vabs.Vh.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabsh_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vabs_Vh_Vh_sat {
    let root = op<hlhvx.vabs.Vh.Vh.sat>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabsh_sat_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vabs_Vw_Vw {
    let root = op<hlhvx.vabs.Vw.Vw>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabsw_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vabs_Vw_Vw_sat {
    let root = op<hlhvx.vabs.Vw.Vw.sat>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabsw_sat_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vadd_Vb_VbVb {
    let root = op<hlhvx.vadd.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wb_WbWb {
    let root = op<hlhvx.vadd.Wb.WbWb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddb_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<256 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_condacc_Vb_QnVbVb {
    let root = op<hlhvx.condacc.Vb.QnVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddbnq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg8;
    };
}

Pattern Rewrite_condacc_Vb_QVbVb {
    let root = op<hlhvx.condacc.Vb.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddbq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vadd_Vh_VhVh {
    let root = op<hlhvx.vadd.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wh_WhWh {
    let root = op<hlhvx.vadd.Wh.WhWh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddh_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_condacc_Vh_QnVhVh {
    let root = op<hlhvx.condacc.Vh.QnVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddhnq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg8;
    };
}

Pattern Rewrite_condacc_Vh_QVhVh {
    let root = op<hlhvx.condacc.Vh.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddhq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vadd_Vh_VhVh_sat {
    let root = op<hlhvx.vadd.Vh.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddhsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wh_WhWh_sat {
    let root = op<hlhvx.vadd.Wh.WhWh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddhsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Ww_VhVh {
    let root = op<hlhvx.vadd.Ww.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddhw_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wh_VubVub {
    let root = op<hlhvx.vadd.Wh.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddubh_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vub_VubVub_sat {
    let root = op<hlhvx.vadd.Vub.VubVub.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddubsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wub_WubWub_sat {
    let root = op<hlhvx.vadd.Wub.WubWub.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddubsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<256 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vuh_VuhVuh_sat {
    let root = op<hlhvx.vadd.Vuh.VuhVuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadduhsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wuh_WuhWuh_sat {
    let root = op<hlhvx.vadd.Wuh.WuhWuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vadduhsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Ww_VuhVuh {
    let root = op<hlhvx.vadd.Ww.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadduhw_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vw_VwVw {
    let root = op<hlhvx.vadd.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Ww_WwWw {
    let root = op<hlhvx.vadd.Ww.WwWw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddw_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_condacc_Vw_QnVwVw {
    let root = op<hlhvx.condacc.Vw.QnVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddwnq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_condacc_Vw_QVwVw {
    let root = op<hlhvx.condacc.Vw.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddwq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vadd_Vw_VwVw_sat {
    let root = op<hlhvx.vadd.Vw.VwVw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddwsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Ww_WwWw_sat {
    let root = op<hlhvx.vadd.Ww.WwWw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddwsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_valign_V_VVR {
    let root = op<hlhvx.valign.V.VVR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.valignb_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_valign_V_VVI {
    let root = op<hlhvx.valign.V.VVI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.valignbi_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vand_V_VV {
    let root = op<hlhvx.vand.V.VV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vand_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vand_V_QR {
    let root = op<hlhvx.vand.V.QR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandqrt_128B>(arg3, arg1) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vandor_V_VQR {
    let root = op<hlhvx.vandor.V.VQR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vandqrt_acc_128B>(arg5, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vand_Q_VR {
    let root = op<hlhvx.vand.Q.VR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg2, arg1) -> (type<"vector<128 x i1>">);
        let arg4 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg5 = op<llhvx.intr.vandqrt_128B>(arg3, arg4) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vandor_Q_QVR {
    let root = op<hlhvx.vandor.Q.QVR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vandvrt_acc_128B>(arg4, arg5, arg2) -> (type<"vector<128 x i1>">);
        let arg7 = op<llhvx.intr.vandqrt_128B>(arg6, arg3) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vasl_Vh_VhR {
    let root = op<hlhvx.vasl.Vh.VhR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vaslh_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vasl_Vh_VhVh {
    let root = op<hlhvx.vasl.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaslhv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasl_Vw_VwR {
    let root = op<hlhvx.vasl.Vw.VwR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vaslw_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vaslacc_Vw_VwVwR {
    let root = op<hlhvx.vaslacc.Vw.VwVwR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vaslw_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasl_Vw_VwVw {
    let root = op<hlhvx.vasl.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaslwv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasr_Vh_VhR {
    let root = op<hlhvx.vasr.Vh.VhR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vasrh_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vasr_Vb_VhVhR_rnd_sat {
    let root = op<hlhvx.vasr.Vb.VhVhR.rnd.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrhbrndsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vub_VhVhR_rnd_sat {
    let root = op<hlhvx.vasr.Vub.VhVhR.rnd.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrhubrndsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vub_VhVhR_sat {
    let root = op<hlhvx.vasr.Vub.VhVhR.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrhubsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vh_VhVh {
    let root = op<hlhvx.vasr.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vasrhv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasr_Vw_VwR {
    let root = op<hlhvx.vasr.Vw.VwR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vasrw_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vasracc_Vw_VwVwR {
    let root = op<hlhvx.vasracc.Vw.VwVwR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrw_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vh_VwVwR {
    let root = op<hlhvx.vasr.Vh.VwVwR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrwh_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vh_VwVwR_rnd_sat {
    let root = op<hlhvx.vasr.Vh.VwVwR.rnd.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrwhrndsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vh_VwVwR_sat {
    let root = op<hlhvx.vasr.Vh.VwVwR.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrwhsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vuh_VwVwR_sat {
    let root = op<hlhvx.vasr.Vuh.VwVwR.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrwuhsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vw_VwVw {
    let root = op<hlhvx.vasr.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vasrwv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_equals_V_V {
    let root = op<hlhvx.equals.V.V>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vassign_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_W_W {
    let root = op<hlhvx.equals.W.W>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg2 = op<llhvx.intr.vassignp_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vavg_Vh_VhVh {
    let root = op<hlhvx.vavg.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vh_VhVh_rnd {
    let root = op<hlhvx.vavg.Vh.VhVh.rnd>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavghrnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vub_VubVub {
    let root = op<hlhvx.vavg.Vub.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vub_VubVub_rnd {
    let root = op<hlhvx.vavg.Vub.VubVub.rnd>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgubrnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vuh_VuhVuh {
    let root = op<hlhvx.vavg.Vuh.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavguh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vuh_VuhVuh_rnd {
    let root = op<hlhvx.vavg.Vuh.VuhVuh.rnd>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavguhrnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vw_VwVw {
    let root = op<hlhvx.vavg.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vw_VwVw_rnd {
    let root = op<hlhvx.vavg.Vw.VwVw.rnd>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgwrnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vcl0_Vuh_Vuh {
    let root = op<hlhvx.vcl0.Vuh.Vuh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcl0h_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcl0_Vuw_Vuw {
    let root = op<hlhvx.vcl0.Vuw.Vuw>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcl0w_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcombine_W_VV {
    let root = op<hlhvx.vcombine.W.VV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vcombine_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vzero_V {
    let root = op<hlhvx.vzero.V>();

    rewrite root with {
        let arg0 = op<llhvx.intr.vd0_128B>() -> (type<"vector<32 x i32>">);
        let arg1 = op<hlhvx.CastVectorFromGeneric>(arg0) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg1;
    };
}

Pattern Rewrite_vdeal_Vb_Vb {
    let root = op<hlhvx.vdeal.Vb.Vb>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vdealb_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vdeale_Vb_VbVb {
    let root = op<hlhvx.vdeale.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vdealb4w_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdeal_Vh_Vh {
    let root = op<hlhvx.vdeal.Vh.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vdealh_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vdeal_W_VVR {
    let root = op<hlhvx.vdeal.W.VVR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vdealvdd_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vdelta_V_VV {
    let root = op<hlhvx.vdelta.V.VV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vdelta_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpy_Vh_VubRb {
    let root = op<hlhvx.vdmpy.Vh.VubRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vdmpybus_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpyacc_Vh_VhVubRb {
    let root = op<hlhvx.vdmpyacc.Vh.VhVubRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vdmpybus_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vdmpy_Wh_WubRb {
    let root = op<hlhvx.vdmpy.Wh.WubRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vdmpybus_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpyacc_Wh_WhWubRb {
    let root = op<hlhvx.vdmpyacc.Wh.WhWubRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vdmpybus_dv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vdmpy_Vw_VhRb {
    let root = op<hlhvx.vdmpy.Vw.VhRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vdmpyhb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpyacc_Vw_VwVhRb {
    let root = op<hlhvx.vdmpyacc.Vw.VwVhRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vdmpyhb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vdmpy_Ww_WhRb {
    let root = op<hlhvx.vdmpy.Ww.WhRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vdmpyhb_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpyacc_Ww_WwWhRb {
    let root = op<hlhvx.vdmpyacc.Ww.WwWhRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vdmpyhb_dv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vdmpy_Vw_WhRh_sat {
    let root = op<hlhvx.vdmpy.Vw.WhRh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<llhvx.intr.vdmpyhisat_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vdmpyacc_Vw_VwWhRh_sat {
    let root = op<hlhvx.vdmpyacc.Vw.VwWhRh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<llhvx.intr.vdmpyhisat_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vdmpy_Vw_VhRh_sat {
    let root = op<hlhvx.vdmpy.Vw.VhRh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vdmpyhsat_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vdmpyacc_Vw_VwVhRh_sat {
    let root = op<hlhvx.vdmpyacc.Vw.VwVhRh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vdmpyhsat_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vdmpy_Vw_WhRuh_sat {
    let root = op<hlhvx.vdmpy.Vw.WhRuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<llhvx.intr.vdmpyhsuisat_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vdmpyacc_Vw_VwWhRuh_sat {
    let root = op<hlhvx.vdmpyacc.Vw.VwWhRuh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<llhvx.intr.vdmpyhsuisat_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vdmpy_Vw_VhRuh_sat {
    let root = op<hlhvx.vdmpy.Vw.VhRuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vdmpyhsusat_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vdmpyacc_Vw_VwVhRuh_sat {
    let root = op<hlhvx.vdmpyacc.Vw.VwVhRuh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vdmpyhsusat_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vdmpy_Vw_VhVh_sat {
    let root = op<hlhvx.vdmpy.Vw.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vdmpyhvsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpyacc_Vw_VwVhVh_sat {
    let root = op<hlhvx.vdmpyacc.Vw.VwVhVh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vdmpyhvsat_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vdsad_Wuw_WuhRuh {
    let root = op<hlhvx.vdsad.Wuw.WuhRuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<llhvx.intr.vdsaduh_128B>(arg2, arg1) -> (type<"vector<64 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vdsadacc_Wuw_WuwWuhRuh {
    let root = op<hlhvx.vdsadacc.Wuw.WuwWuhRuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<llhvx.intr.vdsaduh_acc_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vcmp_eq_Q_VbVb {
    let root = op<hlhvx.vcmp.eq.Q.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.veqb_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_eqand_Q_QVbVb {
    let root = op<hlhvx.vcmp.eqand.Q.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqb_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eqor_Q_QVbVb {
    let root = op<hlhvx.vcmp.eqor.Q.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqb_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eqxacc_Q_QVbVb {
    let root = op<hlhvx.vcmp.eqxacc.Q.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqb_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eq_Q_VhVh {
    let root = op<hlhvx.vcmp.eq.Q.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.veqh_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_eqand_Q_QVhVh {
    let root = op<hlhvx.vcmp.eqand.Q.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqh_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eqor_Q_QVhVh {
    let root = op<hlhvx.vcmp.eqor.Q.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqh_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eqxacc_Q_QVhVh {
    let root = op<hlhvx.vcmp.eqxacc.Q.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqh_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eq_Q_VwVw {
    let root = op<hlhvx.vcmp.eq.Q.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.veqw_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_eqand_Q_QVwVw {
    let root = op<hlhvx.vcmp.eqand.Q.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqw_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eqor_Q_QVwVw {
    let root = op<hlhvx.vcmp.eqor.Q.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqw_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_eqxacc_Q_QVwVw {
    let root = op<hlhvx.vcmp.eqxacc.Q.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.veqw_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VbVb {
    let root = op<hlhvx.vcmp.gt.Q.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtb_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVbVb {
    let root = op<hlhvx.vcmp.gtand.Q.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtb_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVbVb {
    let root = op<hlhvx.vcmp.gtor.Q.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtb_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVbVb {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtb_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VhVh {
    let root = op<hlhvx.vcmp.gt.Q.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgth_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVhVh {
    let root = op<hlhvx.vcmp.gtand.Q.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgth_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVhVh {
    let root = op<hlhvx.vcmp.gtor.Q.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgth_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVhVh {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgth_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VubVub {
    let root = op<hlhvx.vcmp.gt.Q.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtub_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVubVub {
    let root = op<hlhvx.vcmp.gtand.Q.QVubVub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtub_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVubVub {
    let root = op<hlhvx.vcmp.gtor.Q.QVubVub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtub_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVubVub {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVubVub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtub_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VuhVuh {
    let root = op<hlhvx.vcmp.gt.Q.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtuh_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVuhVuh {
    let root = op<hlhvx.vcmp.gtand.Q.QVuhVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtuh_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVuhVuh {
    let root = op<hlhvx.vcmp.gtor.Q.QVuhVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtuh_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVuhVuh {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVuhVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtuh_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VuwVuw {
    let root = op<hlhvx.vcmp.gt.Q.VuwVuw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtuw_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVuwVuw {
    let root = op<hlhvx.vcmp.gtand.Q.QVuwVuw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtuw_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVuwVuw {
    let root = op<hlhvx.vcmp.gtor.Q.QVuwVuw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtuw_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVuwVuw {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVuwVuw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtuw_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VwVw {
    let root = op<hlhvx.vcmp.gt.Q.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtw_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVwVw {
    let root = op<hlhvx.vcmp.gtand.Q.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtw_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVwVw {
    let root = op<hlhvx.vcmp.gtor.Q.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtw_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVwVw {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtw_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vinsert_Vw_VwR {
    let root = op<hlhvx.vinsert.Vw.VwR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vinsertwr_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vlalign_V_VVR {
    let root = op<hlhvx.vlalign.V.VVR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlalignb_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlalign_V_VVI {
    let root = op<hlhvx.vlalign.V.VVI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlalignbi_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlsr_Vuh_VuhR {
    let root = op<hlhvx.vlsr.Vuh.VuhR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vlsrh_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vlsr_Vh_VhVh {
    let root = op<hlhvx.vlsr.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vlsrhv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vlsr_Vuw_VuwR {
    let root = op<hlhvx.vlsr.Vuw.VuwR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vlsrw_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vlsr_Vw_VwVw {
    let root = op<hlhvx.vlsr.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vlsrwv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vlut32_Vb_VbVbR {
    let root = op<hlhvx.vlut32.Vb.VbVbR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlutvvb_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlut32or_Vb_VbVbVbR {
    let root = op<hlhvx.vlut32or.Vb.VbVbVbR>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vlutvvb_oracc_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vlut16_Wh_VbVhR {
    let root = op<hlhvx.vlut16.Wh.VbVhR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlutvwh_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlut16or_Wh_WhVbVhR {
    let root = op<hlhvx.vlut16or.Wh.WhVbVhR>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vlutvwh_oracc_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vmax_Vh_VhVh {
    let root = op<hlhvx.vmax.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmaxh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmax_Vub_VubVub {
    let root = op<hlhvx.vmax.Vub.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmaxub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmax_Vuh_VuhVuh {
    let root = op<hlhvx.vmax.Vuh.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmaxuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmax_Vw_VwVw {
    let root = op<hlhvx.vmax.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmaxw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vh_VhVh {
    let root = op<hlhvx.vmin.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vminh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vub_VubVub {
    let root = op<hlhvx.vmin.Vub.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vminub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vuh_VuhVuh {
    let root = op<hlhvx.vmin.Vuh.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vminuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vw_VwVw {
    let root = op<hlhvx.vmin.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vminw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpa_Wh_WubRb {
    let root = op<hlhvx.vmpa.Wh.WubRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpabus_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpaacc_Wh_WhWubRb {
    let root = op<hlhvx.vmpaacc.Wh.WhWubRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpabus_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpa_Wh_WubWb {
    let root = op<hlhvx.vmpa.Wh.WubWb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vmpabusv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpa_Wh_WubWub {
    let root = op<hlhvx.vmpa.Wh.WubWub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vmpabuuv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpa_Ww_WhRb {
    let root = op<hlhvx.vmpa.Ww.WhRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpahb_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpaacc_Ww_WwWhRb {
    let root = op<hlhvx.vmpaacc.Ww.WwWhRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpahb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Wh_VubRb {
    let root = op<hlhvx.vmpy.Wh.VubRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpybus_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wh_WhVubRb {
    let root = op<hlhvx.vmpyacc.Wh.WhVubRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpybus_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Wh_VubVb {
    let root = op<hlhvx.vmpy.Wh.VubVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpybusv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wh_WhVubVb {
    let root = op<hlhvx.vmpyacc.Wh.WhVubVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpybusv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Wh_VbVb {
    let root = op<hlhvx.vmpy.Wh.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpybv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wh_WhVbVb {
    let root = op<hlhvx.vmpyacc.Wh.WhVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpybv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpye_Vw_VwVuh {
    let root = op<hlhvx.vmpye.Vw.VwVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyewuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Ww_VhRh {
    let root = op<hlhvx.vmpy.Ww.VhRh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vmpyh_128B>(arg2, arg1) -> (type<"vector<64 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpyacc_Ww_WwVhRh_sat {
    let root = op<hlhvx.vmpyacc.Ww.WwVhRh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpyhsat_acc_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmpy_Vh_VhRh_s1_rnd_sat {
    let root = op<hlhvx.vmpy.Vh.VhRh.s1.rnd.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vmpyhsrs_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpy_Vh_VhRh_s1_sat {
    let root = op<hlhvx.vmpy.Vh.VhRh.s1.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vmpyhss_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpy_Ww_VhVuh {
    let root = op<hlhvx.vmpy.Ww.VhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyhus_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Ww_WwVhVuh {
    let root = op<hlhvx.vmpyacc.Ww.WwVhVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyhus_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Ww_VhVh {
    let root = op<hlhvx.vmpy.Ww.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyhv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Ww_WwVhVh {
    let root = op<hlhvx.vmpyacc.Ww.WwVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyhv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Vh_VhVh_s1_rnd_sat {
    let root = op<hlhvx.vmpy.Vh.VhVh.s1.rnd.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyhvsrs_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyieo_Vw_VhVh {
    let root = op<hlhvx.vmpyieo.Vw.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyieoh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyieacc_Vw_VwVwVh {
    let root = op<hlhvx.vmpyieacc.Vw.VwVwVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyiewh_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyie_Vw_VwVuh {
    let root = op<hlhvx.vmpyie.Vw.VwVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyiewuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyieacc_Vw_VwVwVuh {
    let root = op<hlhvx.vmpyieacc.Vw.VwVwVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyiewuh_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyi_Vh_VhVh {
    let root = op<hlhvx.vmpyi.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyih_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyiacc_Vh_VhVhVh {
    let root = op<hlhvx.vmpyiacc.Vh.VhVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyih_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyi_Vh_VhRb {
    let root = op<hlhvx.vmpyi.Vh.VhRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyihb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyiacc_Vh_VhVhRb {
    let root = op<hlhvx.vmpyiacc.Vh.VhVhRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyihb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyio_Vw_VwVh {
    let root = op<hlhvx.vmpyio.Vw.VwVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyiowh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyi_Vw_VwRb {
    let root = op<hlhvx.vmpyi.Vw.VwRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyiwb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyiacc_Vw_VwVwRb {
    let root = op<hlhvx.vmpyiacc.Vw.VwVwRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyiwb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyi_Vw_VwRh {
    let root = op<hlhvx.vmpyi.Vw.VwRh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vmpyiwh_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpyiacc_Vw_VwVwRh {
    let root = op<hlhvx.vmpyiacc.Vw.VwVwRh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpyiwh_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmpyo_Vw_VwVh_s1_sat {
    let root = op<hlhvx.vmpyo.Vw.VwVh.s1.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyowh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyo_Vw_VwVh_s1_rnd_sat {
    let root = op<hlhvx.vmpyo.Vw.VwVh.s1.rnd.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyowh_rnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyoacc_Vw_VwVwVh_s1_rnd_sat_shift {
    let root = op<hlhvx.vmpyoacc.Vw.VwVwVh.s1.rnd.sat.shift>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyowh_rnd_sacc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyoacc_Vw_VwVwVh_s1_sat_shift {
    let root = op<hlhvx.vmpyoacc.Vw.VwVwVh.s1.sat.shift>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyowh_sacc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Wuh_VubRub {
    let root = op<hlhvx.vmpy.Wuh.VubRub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyub_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wuh_WuhVubRub {
    let root = op<hlhvx.vmpyacc.Wuh.WuhVubRub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyub_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Wuh_VubVub {
    let root = op<hlhvx.vmpy.Wuh.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyubv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wuh_WuhVubVub {
    let root = op<hlhvx.vmpyacc.Wuh.WuhVubVub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyubv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Wuw_VuhRuh {
    let root = op<hlhvx.vmpy.Wuw.VuhRuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vmpyuh_128B>(arg2, arg1) -> (type<"vector<64 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpyacc_Wuw_WuwVuhRuh {
    let root = op<hlhvx.vmpyacc.Wuw.WuwVuhRuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpyuh_acc_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmpy_Wuw_VuhVuh {
    let root = op<hlhvx.vmpy.Wuw.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyuhv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wuw_WuwVuhVuh {
    let root = op<hlhvx.vmpyacc.Wuw.WuwVuhVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyuhv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmux_V_QVV {
    let root = op<hlhvx.vmux.V.QVV>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vmux_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vnavg_Vh_VhVh {
    let root = op<hlhvx.vnavg.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vnavgh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vnavg_Vb_VubVub {
    let root = op<hlhvx.vnavg.Vb.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vnavgub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vnavg_Vw_VwVw {
    let root = op<hlhvx.vnavg.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vnavgw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vnormamt_Vh_Vh {
    let root = op<hlhvx.vnormamt.Vh.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vnormamth_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vnormamt_Vw_Vw {
    let root = op<hlhvx.vnormamt.Vw.Vw>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vnormamtw_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vnot_V_V {
    let root = op<hlhvx.vnot.V.V>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vnot_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vor_V_VV {
    let root = op<hlhvx.vor.V.VV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vor_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpacke_Vb_VhVh {
    let root = op<hlhvx.vpacke.Vb.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackeb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpacke_Vh_VwVw {
    let root = op<hlhvx.vpacke.Vh.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackeh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpack_Vb_VhVh_sat {
    let root = op<hlhvx.vpack.Vb.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackhb_sat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpack_Vub_VhVh_sat {
    let root = op<hlhvx.vpack.Vub.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackhub_sat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpacko_Vb_VhVh {
    let root = op<hlhvx.vpacko.Vb.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackob_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpacko_Vh_VwVw {
    let root = op<hlhvx.vpacko.Vh.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackoh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpack_Vh_VwVw_sat {
    let root = op<hlhvx.vpack.Vh.VwVw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackwh_sat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpack_Vuh_VwVw_sat {
    let root = op<hlhvx.vpack.Vuh.VwVw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vpackwuh_sat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vpopcount_Vh_Vh {
    let root = op<hlhvx.vpopcount.Vh.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vpopcounth_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vrdelta_V_VV {
    let root = op<hlhvx.vrdelta.V.VV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrdelta_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrmpy_Vw_VubRb {
    let root = op<hlhvx.vrmpy.Vw.VubRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vrmpybus_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrmpyacc_Vw_VwVubRb {
    let root = op<hlhvx.vrmpyacc.Vw.VwVubRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vrmpybus_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vrmpy_Ww_WubRbI {
    let root = op<hlhvx.vrmpy.Ww.WubRbI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg5 = op<llhvx.intr.vrmpybusi_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vrmpyacc_Ww_WwWubRbI {
    let root = op<hlhvx.vrmpyacc.Ww.WwWubRbI>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg7 = op<llhvx.intr.vrmpybusi_acc_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vrmpy_Vw_VubVb {
    let root = op<hlhvx.vrmpy.Vw.VubVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrmpybusv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrmpyacc_Vw_VwVubVb {
    let root = op<hlhvx.vrmpyacc.Vw.VwVubVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vrmpybusv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vrmpy_Vw_VbVb {
    let root = op<hlhvx.vrmpy.Vw.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrmpybv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrmpyacc_Vw_VwVbVb {
    let root = op<hlhvx.vrmpyacc.Vw.VwVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vrmpybv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vrmpy_Vuw_VubRub {
    let root = op<hlhvx.vrmpy.Vuw.VubRub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vrmpyub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrmpyacc_Vuw_VuwVubRub {
    let root = op<hlhvx.vrmpyacc.Vuw.VuwVubRub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vrmpyub_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vrmpy_Wuw_WubRubI {
    let root = op<hlhvx.vrmpy.Wuw.WubRubI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg5 = op<llhvx.intr.vrmpyubi_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vrmpyacc_Wuw_WuwWubRubI {
    let root = op<hlhvx.vrmpyacc.Wuw.WuwWubRubI>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg7 = op<llhvx.intr.vrmpyubi_acc_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vrmpy_Vuw_VubVub {
    let root = op<hlhvx.vrmpy.Vuw.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrmpyubv_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrmpyacc_Vuw_VuwVubVub {
    let root = op<hlhvx.vrmpyacc.Vuw.VuwVubVub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vrmpyubv_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vror_V_VR {
    let root = op<hlhvx.vror.V.VR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vror_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vround_Vb_VhVh_sat {
    let root = op<hlhvx.vround.Vb.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vroundhb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vround_Vub_VhVh_sat {
    let root = op<hlhvx.vround.Vub.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vroundhub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vround_Vh_VwVw_sat {
    let root = op<hlhvx.vround.Vh.VwVw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vroundwh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vround_Vuh_VwVw_sat {
    let root = op<hlhvx.vround.Vuh.VwVw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vroundwuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vrsad_Wuw_WubRubI {
    let root = op<hlhvx.vrsad.Wuw.WubRubI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg5 = op<llhvx.intr.vrsadubi_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vrsadacc_Wuw_WuwWubRubI {
    let root = op<hlhvx.vrsadacc.Wuw.WuwWubRubI>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg7 = op<llhvx.intr.vrsadubi_acc_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vsat_Vub_VhVh {
    let root = op<hlhvx.vsat.Vub.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsathub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsat_Vh_VwVw {
    let root = op<hlhvx.vsat.Vh.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsatwh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsxt_Wh_Vb {
    let root = op<hlhvx.vsxt.Wh.Vb>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vsb_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vsxt_Ww_Vh {
    let root = op<hlhvx.vsxt.Ww.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vsh_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vshuffe_Vh_VhVh {
    let root = op<hlhvx.vshuffe.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vshufeh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vshuff_Vb_Vb {
    let root = op<hlhvx.vshuff.Vb.Vb>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vshuffb_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vshuffe_Vb_VbVb {
    let root = op<hlhvx.vshuffe.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vshuffeb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vshuff_Vh_Vh {
    let root = op<hlhvx.vshuff.Vh.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vshuffh_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vshuffo_Vb_VbVb {
    let root = op<hlhvx.vshuffo.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vshuffob_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vshuff_W_VVR {
    let root = op<hlhvx.vshuff.W.VVR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vshuffvdd_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vshuffoe_Wb_VbVb {
    let root = op<hlhvx.vshuffoe.Wb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vshufoeb_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<256 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vshuffoe_Wh_VhVh {
    let root = op<hlhvx.vshuffoe.Wh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vshufoeh_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vshuffo_Vh_VhVh {
    let root = op<hlhvx.vshuffo.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vshufoh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vb_VbVb {
    let root = op<hlhvx.vsub.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wb_WbWb {
    let root = op<hlhvx.vsub.Wb.WbWb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubb_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<256 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_condnac_Vb_QnVbVb {
    let root = op<hlhvx.condnac.Vb.QnVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vsubbnq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg8;
    };
}

Pattern Rewrite_condnac_Vb_QVbVb {
    let root = op<hlhvx.condnac.Vb.QVbVb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vsubbq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vsub_Vh_VhVh {
    let root = op<hlhvx.vsub.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wh_WhWh {
    let root = op<hlhvx.vsub.Wh.WhWh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubh_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_condnac_Vh_QnVhVh {
    let root = op<hlhvx.condnac.Vh.QnVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vsubhnq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg8;
    };
}

Pattern Rewrite_condnac_Vh_QVhVh {
    let root = op<hlhvx.condnac.Vh.QVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vsubhq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vsub_Vh_VhVh_sat {
    let root = op<hlhvx.vsub.Vh.VhVh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubhsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wh_WhWh_sat {
    let root = op<hlhvx.vsub.Wh.WhWh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubhsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Ww_VhVh {
    let root = op<hlhvx.vsub.Ww.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubhw_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wh_VubVub {
    let root = op<hlhvx.vsub.Wh.VubVub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsububh_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vub_VubVub_sat {
    let root = op<hlhvx.vsub.Vub.VubVub.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsububsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wub_WubWub_sat {
    let root = op<hlhvx.vsub.Wub.WubWub.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsububsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<256 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vuh_VuhVuh_sat {
    let root = op<hlhvx.vsub.Vuh.VuhVuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubuhsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wuh_WuhWuh_sat {
    let root = op<hlhvx.vsub.Wuh.WuhWuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubuhsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Ww_VuhVuh {
    let root = op<hlhvx.vsub.Ww.VuhVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubuhw_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vw_VwVw {
    let root = op<hlhvx.vsub.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Ww_WwWw {
    let root = op<hlhvx.vsub.Ww.WwWw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubw_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_condnac_Vw_QnVwVw {
    let root = op<hlhvx.condnac.Vw.QnVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vsubwnq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_condnac_Vw_QVwVw {
    let root = op<hlhvx.condnac.Vw.QVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vsubwq_128B>(arg4, arg5, arg6) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vsub_Vw_VwVw_sat {
    let root = op<hlhvx.vsub.Vw.VwVw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubwsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Ww_WwWw_sat {
    let root = op<hlhvx.vsub.Ww.WwWw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubwsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vswap_W_QVV {
    let root = op<hlhvx.vswap.W.QVV>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vswap_128B>(arg4, arg5, arg6) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vtmpy_Wh_WbRb {
    let root = op<hlhvx.vtmpy.Wh.WbRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vtmpyb_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vtmpyacc_Wh_WhWbRb {
    let root = op<hlhvx.vtmpyacc.Wh.WhWbRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vtmpyb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vtmpy_Wh_WubRb {
    let root = op<hlhvx.vtmpy.Wh.WubRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vtmpybus_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vtmpyacc_Wh_WhWubRb {
    let root = op<hlhvx.vtmpyacc.Wh.WhWubRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vtmpybus_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vtmpy_Ww_WhRb {
    let root = op<hlhvx.vtmpy.Ww.WhRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vtmpyhb_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vtmpyacc_Ww_WwWhRb {
    let root = op<hlhvx.vtmpyacc.Ww.WwWhRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vtmpyhb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vunpack_Wh_Vb {
    let root = op<hlhvx.vunpack.Wh.Vb>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vunpackb_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vunpack_Ww_Vh {
    let root = op<hlhvx.vunpack.Ww.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vunpackh_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vunpackoor_Wh_WhVb {
    let root = op<hlhvx.vunpackoor.Wh.WhVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vunpackob_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vunpackoor_Ww_WwVh {
    let root = op<hlhvx.vunpackoor.Ww.WwVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vunpackoh_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vunpack_Wuh_Vub {
    let root = op<hlhvx.vunpack.Wuh.Vub>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vunpackub_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vunpack_Wuw_Vuh {
    let root = op<hlhvx.vunpack.Wuw.Vuh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vunpackuh_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vxor_V_VV {
    let root = op<hlhvx.vxor.V.VV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vxor_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vzxt_Wuh_Vub {
    let root = op<hlhvx.vzxt.Wuh.Vub>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vzb_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<128 x ui16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vzxt_Wuw_Vuh {
    let root = op<hlhvx.vzxt.Wuw.Vuh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vzh_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vsplat_Vb_R {
    let root = op<hlhvx.vsplat.Vb.R>(arg0: Value);

    rewrite root with {
        let arg1 = op<llhvx.intr.lvsplatb_128B>(arg0) -> (type<"vector<32 x i32>">);
        let arg2 = op<hlhvx.CastVectorFromGeneric>(arg1) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg2;
    };
}

Pattern Rewrite_vsplat_Vh_R {
    let root = op<hlhvx.vsplat.Vh.R>(arg0: Value);

    rewrite root with {
        let arg1 = op<llhvx.intr.lvsplath_128B>(arg0) -> (type<"vector<32 x i32>">);
        let arg2 = op<hlhvx.CastVectorFromGeneric>(arg1) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg2;
    };
}

Pattern Rewrite_vsetq2_Q_R {
    let root = op<hlhvx.vsetq2.Q.R>(arg0: Value);

    rewrite root with {
        let arg1 = op<llhvx.intr.pred_scalar2v2_128B>(arg0) -> (type<"vector<128 x i1>">);
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandqrt_128B>(arg1, arg2) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vshuffe_Qb_QhQh {
    let root = op<hlhvx.vshuffe.Qb.QhQh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.shuffeqh_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vshuffe_Qh_QwQw {
    let root = op<hlhvx.vshuffe.Qh.QwQw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg2) -> (type<"vector<128 x i1>">);
        let arg5 = op<llhvx.intr.shuffeqw_128B>(arg3, arg4) -> (type<"vector<128 x i1>">);
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg5, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vadd_Vb_VbVb_sat {
    let root = op<hlhvx.vadd.Vb.VbVb.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddbsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wb_WbWb_sat {
    let root = op<hlhvx.vadd.Wb.WbWb.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vaddbsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<256 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vw_VwVwQ_carry {
    let root = op<hlhvx.vadd.Vw.VwVwQ.carry>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vaddcarry_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vadd_vclb_Vh_VhVh {
    let root = op<hlhvx.vadd.vclb.Vh.VhVh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddclbh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_vclb_Vw_VwVw {
    let root = op<hlhvx.vadd.vclb.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddclbw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vaddacc_Ww_WwVhVh {
    let root = op<hlhvx.vaddacc.Ww.WwVhVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vaddhw_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vaddacc_Wh_WhVubVub {
    let root = op<hlhvx.vaddacc.Wh.WhVubVub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vaddubh_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vadd_Vub_VubVb_sat {
    let root = op<hlhvx.vadd.Vub.VubVb.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vaddububb_sat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vaddacc_Ww_WwVuhVuh {
    let root = op<hlhvx.vaddacc.Ww.WwVuhVuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vadduhw_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vadd_Vuw_VuwVuw_sat {
    let root = op<hlhvx.vadd.Vuw.VuwVuw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadduwsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wuw_WuwWuw_sat {
    let root = op<hlhvx.vadd.Wuw.WuwWuw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vadduwsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vand_V_QnR {
    let root = op<hlhvx.vand.V.QnR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<llhvx.intr.vandnqrt_128B>(arg3, arg1) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vandor_V_VQnR {
    let root = op<hlhvx.vandor.V.VQnR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg1, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vandnqrt_acc_128B>(arg5, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vand_V_QnV {
    let root = op<hlhvx.vand.V.QnV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vandvnqv_128B>(arg3, arg4) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vand_V_QV {
    let root = op<hlhvx.vand.V.QV>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg3 = op<llhvx.intr.vandvrt_128B>(arg0, arg2) -> (type<"vector<128 x i1>">);
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vandvqv_128B>(arg3, arg4) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"1024 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<1024 x i1>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vb_VhVhR_sat {
    let root = op<hlhvx.vasr.Vb.VhVhR.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrhbsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vuh_VuwVuwR_rnd_sat {
    let root = op<hlhvx.vasr.Vuh.VuwVuwR.rnd.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasruwuhrndsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vuh_VwVwR_rnd_sat {
    let root = op<hlhvx.vasr.Vuh.VwVwR.rnd.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrwuhrndsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlsr_Vub_VubR {
    let root = op<hlhvx.vlsr.Vub.VubR>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vlsrb_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vlut32_Vb_VbVbR_nomatch {
    let root = op<hlhvx.vlut32.Vb.VbVbR.nomatch>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlutvvb_nm_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlut32or_Vb_VbVbVbI {
    let root = op<hlhvx.vlut32or.Vb.VbVbVbI>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vlutvvb_oracci_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vlut32_Vb_VbVbI {
    let root = op<hlhvx.vlut32.Vb.VbVbI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlutvvbi_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlut16_Wh_VbVhR_nomatch {
    let root = op<hlhvx.vlut16.Wh.VbVhR.nomatch>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlutvwh_nm_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vlut16or_Wh_WhVbVhI {
    let root = op<hlhvx.vlut16or.Wh.WhVbVhI>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vlutvwh_oracci_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vlut16_Wh_VbVhI {
    let root = op<hlhvx.vlut16.Wh.VbVhI>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vlutvwhi_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmax_Vb_VbVb {
    let root = op<hlhvx.vmax.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmaxb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vb_VbVb {
    let root = op<hlhvx.vmin.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vminb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpa_Ww_WuhRb {
    let root = op<hlhvx.vmpa.Ww.WuhRb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpauhb_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpaacc_Ww_WwWuhRb {
    let root = op<hlhvx.vmpaacc.Ww.WwWuhRb>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpauhb_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpye_W_VwVuh {
    let root = op<hlhvx.vmpye.W.VwVuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyewuh_64_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyi_Vw_VwRub {
    let root = op<hlhvx.vmpyi.Vw.VwRub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyiwub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyiacc_Vw_VwVwRub {
    let root = op<hlhvx.vmpyiacc.Vw.VwVwRub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyiwub_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpyoacc_W_WVwVh {
    let root = op<hlhvx.vmpyoacc.W.WVwVh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpyowh_64_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vround_Vub_VuhVuh_sat {
    let root = op<hlhvx.vround.Vub.VuhVuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrounduhub_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vround_Vuh_VuwVuw_sat {
    let root = op<hlhvx.vround.Vuh.VuwVuw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrounduwuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsat_Vuh_VuwVuw {
    let root = op<hlhvx.vsat.Vuh.VuwVuw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsatuwuh_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vb_VbVb_sat {
    let root = op<hlhvx.vsub.Vb.VbVb.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubbsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wb_WbWb_sat {
    let root = op<hlhvx.vsub.Wb.WbWb.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubbsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"256 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<256 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vw_VwVwQ_carry {
    let root = op<hlhvx.vsub.Vw.VwVwQ.carry>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vsubcarry_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vsub_Vub_VubVb_sat {
    let root = op<hlhvx.vsub.Vub.VubVb.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubububb_sat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vuw_VuwVuw_sat {
    let root = op<hlhvx.vsub.Vuw.VuwVuw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsubuwsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wuw_WuwWuw_sat {
    let root = op<hlhvx.vsub.Wuw.WuwWuw.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg4 = op<llhvx.intr.vsubuwsat_dv_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<64 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vabs_Vb_Vb {
    let root = op<hlhvx.vabs.Vb.Vb>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabsb_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vabs_Vb_Vb_sat {
    let root = op<hlhvx.vabs.Vb.Vb.sat>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabsb_sat_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vaslacc_Vh_VhVhR {
    let root = op<hlhvx.vaslacc.Vh.VhVhR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vaslh_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasracc_Vh_VhVhR {
    let root = op<hlhvx.vasracc.Vh.VhVhR>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasrh_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vub_VuhVuhR_rnd_sat {
    let root = op<hlhvx.vasr.Vub.VuhVuhR.rnd.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasruhubrndsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vub_VuhVuhR_sat {
    let root = op<hlhvx.vasr.Vub.VuhVuhR.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasruhubsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vasr_Vuh_VuwVuwR_sat {
    let root = op<hlhvx.vasr.Vuh.VuwVuwR.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vasruwuhsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vavg_Vb_VbVb {
    let root = op<hlhvx.vavg.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vb_VbVb_rnd {
    let root = op<hlhvx.vavg.Vb.VbVb.rnd>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavgbrnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vuw_VuwVuw {
    let root = op<hlhvx.vavg.Vuw.VuwVuw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavguw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vavg_Vuw_VuwVuw_rnd {
    let root = op<hlhvx.vavg.Vuw.VuwVuw.rnd>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vavguwrnd_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vzero_W {
    let root = op<hlhvx.vzero.W>();

    rewrite root with {
        let arg0 = op<llhvx.intr.vdd0_128B>() -> (type<"vector<64 x i32>">);
        let arg1 = op<hlhvx.CastVectorFromGeneric>(arg0) { length = attr<"2048 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<2048 x i1>">);
        replace root with arg1;
    };
}

Pattern Rewrite_vgather_ARMVh {
    let root = op<hlhvx.vgather.ARMVh>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vgathermh_128B>(arg0, arg1, arg2, arg4);
        replace root with arg5;
    };
}

Pattern Rewrite_vgather_AQRMVh {
    let root = op<hlhvx.vgather.AQRMVh>(arg0: Value, arg1: Value, arg2: Value, arg3: Value, arg4: Value);

    rewrite root with {
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandvrt_128B>(arg1, arg5) -> (type<"vector<128 x i1>">);
        let arg7 = op<hlhvx.CastVectorToGeneric>(arg4) { length = attr<"32 : ui32"> };
        let arg8 = op<llhvx.intr.vgathermhq_128B>(arg0, arg6, arg2, arg3, arg7);
        replace root with arg8;
    };
}

Pattern Rewrite_vgather_ARMWw {
    let root = op<hlhvx.vgather.ARMWw>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"64 : ui32"> };
        let arg5 = op<llhvx.intr.vgathermhw_128B>(arg0, arg1, arg2, arg4);
        replace root with arg5;
    };
}

Pattern Rewrite_vgather_AQRMWw {
    let root = op<hlhvx.vgather.AQRMWw>(arg0: Value, arg1: Value, arg2: Value, arg3: Value, arg4: Value);

    rewrite root with {
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandvrt_128B>(arg1, arg5) -> (type<"vector<128 x i1>">);
        let arg7 = op<hlhvx.CastVectorToGeneric>(arg4) { length = attr<"64 : ui32"> };
        let arg8 = op<llhvx.intr.vgathermhwq_128B>(arg0, arg6, arg2, arg3, arg7);
        replace root with arg8;
    };
}

Pattern Rewrite_vgather_ARMVw {
    let root = op<hlhvx.vgather.ARMVw>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vgathermw_128B>(arg0, arg1, arg2, arg4);
        replace root with arg5;
    };
}

Pattern Rewrite_vgather_AQRMVw {
    let root = op<hlhvx.vgather.AQRMVw>(arg0: Value, arg1: Value, arg2: Value, arg3: Value, arg4: Value);

    rewrite root with {
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandvrt_128B>(arg1, arg5) -> (type<"vector<128 x i1>">);
        let arg7 = op<hlhvx.CastVectorToGeneric>(arg4) { length = attr<"32 : ui32"> };
        let arg8 = op<llhvx.intr.vgathermwq_128B>(arg0, arg6, arg2, arg3, arg7);
        replace root with arg8;
    };
}

Pattern Rewrite_vlut4_Vh_VuhPh {
    let root = op<hlhvx.vlut4.Vh.VuhPh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vlut4_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpa_Wh_WubRub {
    let root = op<hlhvx.vmpa.Wh.WubRub>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToRegister>(arg1) { length = attr<"128 : ui32"> };
        let arg4 = op<llhvx.intr.vmpabuu_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpaacc_Wh_WhWubRub {
    let root = op<hlhvx.vmpaacc.Wh.WhWubRub>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToRegister>(arg2) { length = attr<"128 : ui32"> };
        let arg6 = op<llhvx.intr.vmpabuu_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<128 x si16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpa_Vh_VhVhVhPh_sat {
    let root = op<hlhvx.vmpa.Vh.VhVhVhPh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpahhsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmpa_Vh_VhVhVuhPuh_sat {
    let root = op<hlhvx.vmpa.Vh.VhVhVuhPuh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpauhuhsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmps_Vh_VhVhVuhPuh_sat {
    let root = op<hlhvx.vmps.Vh.VhVhVuhPuh.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpsuhuhsat_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmpyacc_Ww_WwVhRh {
    let root = op<hlhvx.vmpyacc.Ww.WwVhRh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpyh_acc_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vmpye_Vuw_VuhRuh {
    let root = op<hlhvx.vmpye.Vuw.VuhRuh>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<llhvx.intr.vmpyuhe_128B>(arg2, arg1) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vmpyeacc_Vuw_VuwVuhRuh {
    let root = op<hlhvx.vmpyeacc.Vuw.VuwVuhRuh>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<llhvx.intr.vmpyuhe_acc_128B>(arg3, arg4, arg2) -> (type<"vector<32 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_vnavg_Vb_VbVb {
    let root = op<hlhvx.vnavg.Vb.VbVb>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vnavgb_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_prefixsum_Vb_Q {
    let root = op<hlhvx.prefixsum.Vb.Q>(arg0: Value);

    rewrite root with {
        let arg1 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg2 = op<llhvx.intr.vandvrt_128B>(arg0, arg1) -> (type<"vector<128 x i1>">);
        let arg3 = op<llhvx.intr.vprefixqb_128B>(arg2) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg4;
    };
}

Pattern Rewrite_prefixsum_Vh_Q {
    let root = op<hlhvx.prefixsum.Vh.Q>(arg0: Value);

    rewrite root with {
        let arg1 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg2 = op<llhvx.intr.vandvrt_128B>(arg0, arg1) -> (type<"vector<128 x i1>">);
        let arg3 = op<llhvx.intr.vprefixqh_128B>(arg2) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg4;
    };
}

Pattern Rewrite_prefixsum_Vw_Q {
    let root = op<hlhvx.prefixsum.Vw.Q>(arg0: Value);

    rewrite root with {
        let arg1 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg2 = op<llhvx.intr.vandvrt_128B>(arg0, arg1) -> (type<"vector<128 x i1>">);
        let arg3 = op<llhvx.intr.vprefixqw_128B>(arg2) -> (type<"vector<32 x i32>">);
        let arg4 = op<hlhvx.CastVectorFromGeneric>(arg3) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg4;
    };
}

Pattern Rewrite_vscatter_RMVhV {
    let root = op<hlhvx.vscatter.RMVhV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vscattermh_128B>(arg0, arg1, arg4, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vscatteracc_RMVhV {
    let root = op<hlhvx.vscatteracc.RMVhV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vscattermh_add_128B>(arg0, arg1, arg4, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vscatter_QRMVhV {
    let root = op<hlhvx.vscatter.QRMVhV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value, arg4: Value);

    rewrite root with {
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandvrt_128B>(arg0, arg5) -> (type<"vector<128 x i1>">);
        let arg7 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg8 = op<hlhvx.CastVectorToGeneric>(arg4) { length = attr<"32 : ui32"> };
        let arg9 = op<llhvx.intr.vscattermhq_128B>(arg6, arg1, arg2, arg7, arg8);
        replace root with arg9;
    };
}

Pattern Rewrite_vscatter_RMWwV {
    let root = op<hlhvx.vscatter.RMWwV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vscattermhw_128B>(arg0, arg1, arg4, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vscatteracc_RMWwV {
    let root = op<hlhvx.vscatteracc.RMWwV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vscattermhw_add_128B>(arg0, arg1, arg4, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vscatter_QRMWwV {
    let root = op<hlhvx.vscatter.QRMWwV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value, arg4: Value);

    rewrite root with {
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandvrt_128B>(arg0, arg5) -> (type<"vector<128 x i1>">);
        let arg7 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"64 : ui32"> };
        let arg8 = op<hlhvx.CastVectorToGeneric>(arg4) { length = attr<"32 : ui32"> };
        let arg9 = op<llhvx.intr.vscattermhwq_128B>(arg6, arg1, arg2, arg7, arg8);
        replace root with arg9;
    };
}

Pattern Rewrite_vscatter_RMVwV {
    let root = op<hlhvx.vscatter.RMVwV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vscattermw_128B>(arg0, arg1, arg4, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vscatteracc_RMVwV {
    let root = op<hlhvx.vscatteracc.RMVwV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vscattermw_add_128B>(arg0, arg1, arg4, arg5);
        replace root with arg6;
    };
}

Pattern Rewrite_vscatter_QRMVwV {
    let root = op<hlhvx.vscatter.QRMVwV>(arg0: Value, arg1: Value, arg2: Value, arg3: Value, arg4: Value);

    rewrite root with {
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandvrt_128B>(arg0, arg5) -> (type<"vector<128 x i1>">);
        let arg7 = op<hlhvx.CastVectorToGeneric>(arg3) { length = attr<"32 : ui32"> };
        let arg8 = op<hlhvx.CastVectorToGeneric>(arg4) { length = attr<"32 : ui32"> };
        let arg9 = op<llhvx.intr.vscattermwq_128B>(arg6, arg1, arg2, arg7, arg8);
        replace root with arg9;
    };
}

Pattern Rewrite_vadd_Vw_VwVwQ_carry_sat {
    let root = op<hlhvx.vadd.Vw.VwVwQ.carry.sat>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vaddcarrysat_128B>(arg5, arg6, arg4) -> (type<"vector<32 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vasrinto_Ww_WwVwVw {
    let root = op<hlhvx.vasrinto.Ww.WwVwVw>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vasr_into_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vrotr_Vuw_VuwVuw {
    let root = op<hlhvx.vrotr.Vuw.VuwVuw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vrotr_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"ui32\""> } -> (type<"vector<32 x ui32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsatdw_Vw_VwVw {
    let root = op<hlhvx.vsatdw.Vw.VwVw>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsatdw_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_v6mpy_Ww_WubWbI_h {
    let root = op<hlhvx.v6mpy.Ww.WubWbI.h>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<llhvx.intr.v6mpyhubs10_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_v6mpyacc_Ww_WwWubWbI_h {
    let root = op<hlhvx.v6mpyacc.Ww.WwWubWbI.h>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"64 : ui32"> };
        let arg7 = op<llhvx.intr.v6mpyhubs10_vxx_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_v6mpy_Ww_WubWbI_v {
    let root = op<hlhvx.v6mpy.Ww.WubWbI.v>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg5 = op<llhvx.intr.v6mpyvubs10_128B>(arg3, arg4, arg2) -> (type<"vector<64 x i32>">);
        let arg6 = op<hlhvx.CastVectorFromGeneric>(arg5) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg6;
    };
}

Pattern Rewrite_v6mpyacc_Ww_WwWubWbI_v {
    let root = op<hlhvx.v6mpyacc.Ww.WwWubWbI.v>(arg0: Value, arg1: Value, arg2: Value, arg3: Value);

    rewrite root with {
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"64 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"64 : ui32"> };
        let arg7 = op<llhvx.intr.v6mpyvubs10_vxx_128B>(arg4, arg5, arg6, arg3) -> (type<"vector<64 x i32>">);
        let arg8 = op<hlhvx.CastVectorFromGeneric>(arg7) { length = attr<"64 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<64 x si32>">);
        replace root with arg8;
    };
}

Pattern Rewrite_vabs_Vhf_Vhf {
    let root = op<hlhvx.vabs.Vhf.Vhf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabs_hf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vabs_Vsf_Vsf {
    let root = op<hlhvx.vabs.Vsf.Vsf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vabs_sf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vadd_Vqf16_VhfVhf {
    let root = op<hlhvx.vadd.Vqf16.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vhf_VhfVhf {
    let root = op<hlhvx.vadd.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_hf_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vqf16_Vqf16Vqf16 {
    let root = op<hlhvx.vadd.Vqf16.Vqf16Vqf16>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_qf16_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vqf16_Vqf16Vhf {
    let root = op<hlhvx.vadd.Vqf16.Vqf16Vhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_qf16_mix_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vqf32_Vqf32Vqf32 {
    let root = op<hlhvx.vadd.Vqf32.Vqf32Vqf32>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_qf32_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vqf32_Vqf32Vsf {
    let root = op<hlhvx.vadd.Vqf32.Vqf32Vsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_qf32_mix_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vqf32_VsfVsf {
    let root = op<hlhvx.vadd.Vqf32.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wsf_VhfVhf {
    let root = op<hlhvx.vadd.Wsf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_sf_hf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Vsf_VsfVsf {
    let root = op<hlhvx.vadd.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_sf_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vfmv_Vw_Vw {
    let root = op<hlhvx.vfmv.Vw.Vw>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vassign_fp_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_Vhf_Vqf16 {
    let root = op<hlhvx.equals.Vhf.Vqf16>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_hf_qf16_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_Vhf_Wqf32 {
    let root = op<hlhvx.equals.Vhf.Wqf32>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_hf_qf32_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_Vsf_Vqf32 {
    let root = op<hlhvx.equals.Vsf.Vqf32>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_sf_qf32_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Vb_VhfVhf {
    let root = op<hlhvx.vcvt.Vb.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vcvt_b_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"si8\""> } -> (type<"vector<128 x si8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vcvt_Vh_Vhf {
    let root = op<hlhvx.vcvt.Vh.Vhf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_h_hf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Whf_Vb {
    let root = op<hlhvx.vcvt.Whf.Vb>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_hf_b_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<64 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Vhf_Vh {
    let root = op<hlhvx.vcvt.Vhf.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_hf_h_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Vhf_VsfVsf {
    let root = op<hlhvx.vcvt.Vhf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vcvt_hf_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vcvt_Whf_Vub {
    let root = op<hlhvx.vcvt.Whf.Vub>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_hf_ub_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<64 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Vhf_Vuh {
    let root = op<hlhvx.vcvt.Vhf.Vuh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_hf_uh_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Wsf_Vhf {
    let root = op<hlhvx.vcvt.Wsf.Vhf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_sf_hf_128B>(arg1) -> (type<"vector<64 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Vub_VhfVhf {
    let root = op<hlhvx.vcvt.Vub.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vcvt_ub_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vcvt_Vuh_Vhf {
    let root = op<hlhvx.vcvt.Vuh.Vhf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vcvt_uh_hf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vdmpy_Vsf_VhfVhf {
    let root = op<hlhvx.vdmpy.Vsf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vdmpy_sf_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vdmpyacc_Vsf_VsfVhfVhf {
    let root = op<hlhvx.vdmpyacc.Vsf.VsfVhfVhf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vdmpy_sf_hf_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vfmax_Vhf_VhfVhf {
    let root = op<hlhvx.vfmax.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vfmax_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vfmax_Vsf_VsfVsf {
    let root = op<hlhvx.vfmax.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vfmax_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vfmin_Vhf_VhfVhf {
    let root = op<hlhvx.vfmin.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vfmin_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vfmin_Vsf_VsfVsf {
    let root = op<hlhvx.vfmin.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vfmin_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vfneg_Vhf_Vhf {
    let root = op<hlhvx.vfneg.Vhf.Vhf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vfneg_hf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vfneg_Vsf_Vsf {
    let root = op<hlhvx.vfneg.Vsf.Vsf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vfneg_sf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcmp_gt_Q_VhfVhf {
    let root = op<hlhvx.vcmp.gt.Q.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgthf_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVhfVhf {
    let root = op<hlhvx.vcmp.gtand.Q.QVhfVhf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgthf_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVhfVhf {
    let root = op<hlhvx.vcmp.gtor.Q.QVhfVhf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgthf_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVhfVhf {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVhfVhf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgthf_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gt_Q_VsfVsf {
    let root = op<hlhvx.vcmp.gt.Q.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtsf_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVsfVsf {
    let root = op<hlhvx.vcmp.gtand.Q.QVsfVsf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtsf_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVsfVsf {
    let root = op<hlhvx.vcmp.gtor.Q.QVsfVsf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtsf_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVsfVsf {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVsfVsf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtsf_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vmax_Vhf_VhfVhf {
    let root = op<hlhvx.vmax.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmax_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmax_Vsf_VsfVsf {
    let root = op<hlhvx.vmax.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmax_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vhf_VhfVhf {
    let root = op<hlhvx.vmin.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmin_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vsf_VsfVsf {
    let root = op<hlhvx.vmin.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmin_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Vhf_VhfVhf {
    let root = op<hlhvx.vmpy.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_hf_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Vhf_VhfVhfVhf {
    let root = op<hlhvx.vmpyacc.Vhf.VhfVhfVhf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpy_hf_hf_acc_128B>(arg3, arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Vqf16_Vqf16Vqf16 {
    let root = op<hlhvx.vmpy.Vqf16.Vqf16Vqf16>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf16_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Vqf16_VhfVhf {
    let root = op<hlhvx.vmpy.Vqf16.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf16_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Vqf16_Vqf16Vhf {
    let root = op<hlhvx.vmpy.Vqf16.Vqf16Vhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf16_mix_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Vqf32_Vqf32Vqf32 {
    let root = op<hlhvx.vmpy.Vqf32.Vqf32Vqf32>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf32_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Wqf32_VhfVhf {
    let root = op<hlhvx.vmpy.Wqf32.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf32_hf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Wqf32_Vqf16Vhf {
    let root = op<hlhvx.vmpy.Wqf32.Vqf16Vhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf32_mix_hf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Wqf32_Vqf16Vqf16 {
    let root = op<hlhvx.vmpy.Wqf32.Vqf16Vqf16>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf32_qf16_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Vqf32_VsfVsf {
    let root = op<hlhvx.vmpy.Vqf32.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_qf32_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Wsf_VhfVhf {
    let root = op<hlhvx.vmpy.Wsf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_sf_hf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wsf_WsfVhfVhf {
    let root = op<hlhvx.vmpyacc.Wsf.WsfVhfVhf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpy_sf_hf_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vmpy_Vsf_VsfVsf {
    let root = op<hlhvx.vmpy.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_sf_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vqf16_VhfVhf {
    let root = op<hlhvx.vsub.Vqf16.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vhf_VhfVhf {
    let root = op<hlhvx.vsub.Vhf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_hf_hf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vqf16_Vqf16Vqf16 {
    let root = op<hlhvx.vsub.Vqf16.Vqf16Vqf16>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_qf16_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vqf16_Vqf16Vhf {
    let root = op<hlhvx.vsub.Vqf16.Vqf16Vhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_qf16_mix_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<32 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vqf32_Vqf32Vqf32 {
    let root = op<hlhvx.vsub.Vqf32.Vqf32Vqf32>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_qf32_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vqf32_Vqf32Vsf {
    let root = op<hlhvx.vsub.Vqf32.Vqf32Vsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_qf32_mix_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vqf32_VsfVsf {
    let root = op<hlhvx.vsub.Vqf32.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Wsf_VhfVhf {
    let root = op<hlhvx.vsub.Wsf.VhfVhf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_sf_hf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vsub_Vsf_VsfVsf {
    let root = op<hlhvx.vsub.Vsf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_sf_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasr_Vub_WuhVub_rnd_sat {
    let root = op<hlhvx.vasr.Vub.WuhVub.rnd.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vasrvuhubrndsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasr_Vub_WuhVub_sat {
    let root = op<hlhvx.vasr.Vub.WuhVub.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vasrvuhubsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"ui8\""> } -> (type<"vector<128 x ui8>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasr_Vuh_WwVuh_rnd_sat {
    let root = op<hlhvx.vasr.Vuh.WwVuh.rnd.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vasrvwuhrndsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vasr_Vuh_WwVuh_sat {
    let root = op<hlhvx.vasr.Vuh.WwVuh.sat>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vasrvwuhsat_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Vuh_VuhVuh_rs16 {
    let root = op<hlhvx.vmpy.Vuh.VuhVuh.rs16>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpyuhvs_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"ui16\""> } -> (type<"vector<64 x ui16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vadd_Wsf_VbfVbf {
    let root = op<hlhvx.vadd.Wsf.VbfVbf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vadd_sf_bf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_equals_Vh_Vhf {
    let root = op<hlhvx.equals.Vh.Vhf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_h_hf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"si16\""> } -> (type<"vector<64 x si16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_Vhf_Vh {
    let root = op<hlhvx.equals.Vhf.Vh>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_hf_h_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"f32\""> } -> (type<"vector<32 x f32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_Vsf_Vw {
    let root = op<hlhvx.equals.Vsf.Vw>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_sf_w_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"64 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<64 x f16>">);
        replace root with arg3;
    };
}

Pattern Rewrite_equals_Vw_Vsf {
    let root = op<hlhvx.equals.Vw.Vsf>(arg0: Value);

    rewrite root with {
        let arg1 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg2 = op<llhvx.intr.vconv_w_sf_128B>(arg1) -> (type<"vector<32 x i32>">);
        let arg3 = op<hlhvx.CastVectorFromGeneric>(arg2) { length = attr<"32 : ui32">, type = attr<"\"si32\""> } -> (type<"vector<32 x si32>">);
        replace root with arg3;
    };
}

Pattern Rewrite_vcvt_Vbf_VsfVsf {
    let root = op<hlhvx.vcvt.Vbf.VsfVsf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vcvt_bf_sf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"bf16\""> } -> (type<"vector<64 x bf16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vcmp_gt_Q_VbfVbf {
    let root = op<hlhvx.vcmp.gt.Q.VbfVbf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vgtbf_128B>(arg2, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg6 = op<llhvx.intr.vandqrt_128B>(arg4, arg5) -> (type<"vector<32 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vcmp_gtand_Q_QVbfVbf {
    let root = op<hlhvx.vcmp.gtand.Q.QVbfVbf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtbf_and_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtor_Q_QVbfVbf {
    let root = op<hlhvx.vcmp.gtor.Q.QVbfVbf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtbf_or_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vcmp_gtxacc_Q_QVbfVbf {
    let root = op<hlhvx.vcmp.gtxacc.Q.QVbfVbf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<arith.constant>() { value = attr<"-1 : i32"> };
        let arg4 = op<llhvx.intr.vandvrt_128B>(arg0, arg3) -> (type<"vector<128 x i1>">);
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg6 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg7 = op<llhvx.intr.vgtbf_xor_128B>(arg4, arg5, arg6) -> (type<"vector<128 x i1>">);
        let arg8 = op<llhvx.intr.vandqrt_128B>(arg7, arg3) -> (type<"vector<32 x i32>">);
        let arg9 = op<hlhvx.CastVectorFromGeneric>(arg8) { length = attr<"128 : ui32">, type = attr<"\"i1\""> } -> (type<"vector<128 x i1>">);
        replace root with arg9;
    };
}

Pattern Rewrite_vmax_Vbf_VbfVbf {
    let root = op<hlhvx.vmax.Vbf.VbfVbf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmax_bf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"bf16\""> } -> (type<"vector<64 x bf16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmin_Vbf_VbfVbf {
    let root = op<hlhvx.vmin.Vbf.VbfVbf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmin_bf_128B>(arg2, arg3) -> (type<"vector<32 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"64 : ui32">, type = attr<"\"bf16\""> } -> (type<"vector<64 x bf16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpy_Wsf_VbfVbf {
    let root = op<hlhvx.vmpy.Wsf.VbfVbf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vmpy_sf_bf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg5;
    };
}

Pattern Rewrite_vmpyacc_Wsf_WsfVbfVbf {
    let root = op<hlhvx.vmpyacc.Wsf.WsfVbfVbf>(arg0: Value, arg1: Value, arg2: Value);

    rewrite root with {
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"64 : ui32"> };
        let arg4 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg5 = op<hlhvx.CastVectorToGeneric>(arg2) { length = attr<"32 : ui32"> };
        let arg6 = op<llhvx.intr.vmpy_sf_bf_acc_128B>(arg3, arg4, arg5) -> (type<"vector<64 x i32>">);
        let arg7 = op<hlhvx.CastVectorFromGeneric>(arg6) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg7;
    };
}

Pattern Rewrite_vsub_Wsf_VbfVbf {
    let root = op<hlhvx.vsub.Wsf.VbfVbf>(arg0: Value, arg1: Value);

    rewrite root with {
        let arg2 = op<hlhvx.CastVectorToGeneric>(arg0) { length = attr<"32 : ui32"> };
        let arg3 = op<hlhvx.CastVectorToGeneric>(arg1) { length = attr<"32 : ui32"> };
        let arg4 = op<llhvx.intr.vsub_sf_bf_128B>(arg2, arg3) -> (type<"vector<64 x i32>">);
        let arg5 = op<hlhvx.CastVectorFromGeneric>(arg4) { length = attr<"128 : ui32">, type = attr<"\"f16\""> } -> (type<"vector<128 x f16>">);
        replace root with arg5;
    };
}

