// GENERATED BY scripts/gen_hvxops.py - DO NOT EDIT MANUALLY

def HVX_vextract_R_VR :
    HLHVX_Op<
        "vextract.R.VR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        AnyI32:$result
    )>;

def HVX_hi_V_W :
    HLHVX_Op<
        "hi.V.W"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[2048], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_lo_V_W :
    HLHVX_Op<
        "lo.V.W"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[2048], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vsplat_V_R :
    HLHVX_Op<
        "vsplat.V.R"
    >,
    Arguments<(ins
        AnyI32:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_and_Q_QQ :
    HLHVX_Op<
        "and.Q.QQ"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_and_Q_QQn :
    HLHVX_Op<
        "and.Q.QQn"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_not_Q_Q :
    HLHVX_Op<
        "not.Q.Q"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_or_Q_QQ :
    HLHVX_Op<
        "or.Q.QQ"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_or_Q_QQn :
    HLHVX_Op<
        "or.Q.QQn"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vsetq_Q_R :
    HLHVX_Op<
        "vsetq.Q.R"
    >,
    Arguments<(ins
        AnyI32:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_xor_Q_QQ :
    HLHVX_Op<
        "xor.Q.QQ"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vmem_QnRIV :
    HLHVX_Op<
        "vmem.QnRIV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[1024], [I1]>:$arg2
    )>;

def HVX_vmem_QnRIV_nt :
    HLHVX_Op<
        "vmem.QnRIV.nt"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[1024], [I1]>:$arg2
    )>;

def HVX_vmem_QRIV_nt :
    HLHVX_Op<
        "vmem.QRIV.nt"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[1024], [I1]>:$arg2
    )>;

def HVX_vmem_QRIV :
    HLHVX_Op<
        "vmem.QRIV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[1024], [I1]>:$arg2
    )>;

def HVX_vabsdiff_Vuh_VhVh :
    HLHVX_Op<
        "vabsdiff.Vuh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vabsdiff_Vub_VubVub :
    HLHVX_Op<
        "vabsdiff.Vub.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vabsdiff_Vuh_VuhVuh :
    HLHVX_Op<
        "vabsdiff.Vuh.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vabsdiff_Vuw_VwVw :
    HLHVX_Op<
        "vabsdiff.Vuw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vabs_Vh_Vh :
    HLHVX_Op<
        "vabs.Vh.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vabs_Vh_Vh_sat :
    HLHVX_Op<
        "vabs.Vh.Vh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vabs_Vw_Vw :
    HLHVX_Op<
        "vabs.Vw.Vw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vabs_Vw_Vw_sat :
    HLHVX_Op<
        "vabs.Vw.Vw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vadd_Vb_VbVb :
    HLHVX_Op<
        "vadd.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vadd_Wb_WbWb :
    HLHVX_Op<
        "vadd.Wb.WbWb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [SI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [SI8]>:$result
    )>;

def HVX_condacc_Vb_QnVbVb :
    HLHVX_Op<
        "condacc.Vb.QnVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_condacc_Vb_QVbVb :
    HLHVX_Op<
        "condacc.Vb.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vadd_Vh_VhVh :
    HLHVX_Op<
        "vadd.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vadd_Wh_WhWh :
    HLHVX_Op<
        "vadd.Wh.WhWh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_condacc_Vh_QnVhVh :
    HLHVX_Op<
        "condacc.Vh.QnVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_condacc_Vh_QVhVh :
    HLHVX_Op<
        "condacc.Vh.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vadd_Vh_VhVh_sat :
    HLHVX_Op<
        "vadd.Vh.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vadd_Wh_WhWh_sat :
    HLHVX_Op<
        "vadd.Wh.WhWh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vadd_Ww_VhVh :
    HLHVX_Op<
        "vadd.Ww.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vadd_Wh_VubVub :
    HLHVX_Op<
        "vadd.Wh.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vadd_Vub_VubVub_sat :
    HLHVX_Op<
        "vadd.Vub.VubVub.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vadd_Wub_WubWub_sat :
    HLHVX_Op<
        "vadd.Wub.WubWub.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [UI8]>:$result
    )>;

def HVX_vadd_Vuh_VuhVuh_sat :
    HLHVX_Op<
        "vadd.Vuh.VuhVuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vadd_Wuh_WuhWuh_sat :
    HLHVX_Op<
        "vadd.Wuh.WuhWuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vadd_Ww_VuhVuh :
    HLHVX_Op<
        "vadd.Ww.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vadd_Vw_VwVw :
    HLHVX_Op<
        "vadd.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vadd_Ww_WwWw :
    HLHVX_Op<
        "vadd.Ww.WwWw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_condacc_Vw_QnVwVw :
    HLHVX_Op<
        "condacc.Vw.QnVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_condacc_Vw_QVwVw :
    HLHVX_Op<
        "condacc.Vw.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vadd_Vw_VwVw_sat :
    HLHVX_Op<
        "vadd.Vw.VwVw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vadd_Ww_WwWw_sat :
    HLHVX_Op<
        "vadd.Ww.WwWw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_valign_V_VVR :
    HLHVX_Op<
        "valign.V.VVR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_valign_V_VVI :
    HLHVX_Op<
        "valign.V.VVI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vand_V_VV :
    HLHVX_Op<
        "vand.V.VV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vand_V_QR :
    HLHVX_Op<
        "vand.V.QR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vandor_V_VQR :
    HLHVX_Op<
        "vandor.V.VQR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vand_Q_VR :
    HLHVX_Op<
        "vand.Q.VR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vandor_Q_QVR :
    HLHVX_Op<
        "vandor.Q.QVR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vasl_Vh_VhR :
    HLHVX_Op<
        "vasl.Vh.VhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasl_Vh_VhVh :
    HLHVX_Op<
        "vasl.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasl_Vw_VwR :
    HLHVX_Op<
        "vasl.Vw.VwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vaslacc_Vw_VwVwR :
    HLHVX_Op<
        "vaslacc.Vw.VwVwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vasl_Vw_VwVw :
    HLHVX_Op<
        "vasl.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vasr_Vh_VhR :
    HLHVX_Op<
        "vasr.Vh.VhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasr_Vb_VhVhR_rnd_sat :
    HLHVX_Op<
        "vasr.Vb.VhVhR.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vasr_Vub_VhVhR_rnd_sat :
    HLHVX_Op<
        "vasr.Vub.VhVhR.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vasr_Vub_VhVhR_sat :
    HLHVX_Op<
        "vasr.Vub.VhVhR.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vasr_Vh_VhVh :
    HLHVX_Op<
        "vasr.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasr_Vw_VwR :
    HLHVX_Op<
        "vasr.Vw.VwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vasracc_Vw_VwVwR :
    HLHVX_Op<
        "vasracc.Vw.VwVwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vasr_Vh_VwVwR :
    HLHVX_Op<
        "vasr.Vh.VwVwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasr_Vh_VwVwR_rnd_sat :
    HLHVX_Op<
        "vasr.Vh.VwVwR.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasr_Vh_VwVwR_sat :
    HLHVX_Op<
        "vasr.Vh.VwVwR.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasr_Vuh_VwVwR_sat :
    HLHVX_Op<
        "vasr.Vuh.VwVwR.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vasr_Vw_VwVw :
    HLHVX_Op<
        "vasr.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_equals_V_V :
    HLHVX_Op<
        "equals.V.V"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_equals_W_W :
    HLHVX_Op<
        "equals.W.W"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[2048], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vavg_Vh_VhVh :
    HLHVX_Op<
        "vavg.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vavg_Vh_VhVh_rnd :
    HLHVX_Op<
        "vavg.Vh.VhVh.rnd"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vavg_Vub_VubVub :
    HLHVX_Op<
        "vavg.Vub.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vavg_Vub_VubVub_rnd :
    HLHVX_Op<
        "vavg.Vub.VubVub.rnd"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vavg_Vuh_VuhVuh :
    HLHVX_Op<
        "vavg.Vuh.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vavg_Vuh_VuhVuh_rnd :
    HLHVX_Op<
        "vavg.Vuh.VuhVuh.rnd"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vavg_Vw_VwVw :
    HLHVX_Op<
        "vavg.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vavg_Vw_VwVw_rnd :
    HLHVX_Op<
        "vavg.Vw.VwVw.rnd"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vcl0_Vuh_Vuh :
    HLHVX_Op<
        "vcl0.Vuh.Vuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vcl0_Vuw_Vuw :
    HLHVX_Op<
        "vcl0.Vuw.Vuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vcombine_W_VV :
    HLHVX_Op<
        "vcombine.W.VV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vzero_V :
    HLHVX_Op<
        "vzero.V"
    >,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vdeal_Vb_Vb :
    HLHVX_Op<
        "vdeal.Vb.Vb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vdeale_Vb_VbVb :
    HLHVX_Op<
        "vdeale.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vdeal_Vh_Vh :
    HLHVX_Op<
        "vdeal.Vh.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vdeal_W_VVR :
    HLHVX_Op<
        "vdeal.W.VVR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vdelta_V_VV :
    HLHVX_Op<
        "vdelta.V.VV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vdmpy_Vh_VubRb :
    HLHVX_Op<
        "vdmpy.Vh.VubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vdmpyacc_Vh_VhVubRb :
    HLHVX_Op<
        "vdmpyacc.Vh.VhVubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vdmpy_Wh_WubRb :
    HLHVX_Op<
        "vdmpy.Wh.WubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vdmpyacc_Wh_WhWubRb :
    HLHVX_Op<
        "vdmpyacc.Wh.WhWubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vdmpy_Vw_VhRb :
    HLHVX_Op<
        "vdmpy.Vw.VhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Vw_VwVhRb :
    HLHVX_Op<
        "vdmpyacc.Vw.VwVhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpy_Ww_WhRb :
    HLHVX_Op<
        "vdmpy.Ww.WhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Ww_WwWhRb :
    HLHVX_Op<
        "vdmpyacc.Ww.WwWhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vdmpy_Vw_WhRh_sat :
    HLHVX_Op<
        "vdmpy.Vw.WhRh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Vw_VwWhRh_sat :
    HLHVX_Op<
        "vdmpyacc.Vw.VwWhRh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1,
        VectorOfLengthAndType<[2], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpy_Vw_VhRh_sat :
    HLHVX_Op<
        "vdmpy.Vw.VhRh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Vw_VwVhRh_sat :
    HLHVX_Op<
        "vdmpyacc.Vw.VwVhRh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[2], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpy_Vw_WhRuh_sat :
    HLHVX_Op<
        "vdmpy.Vw.WhRuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Vw_VwWhRuh_sat :
    HLHVX_Op<
        "vdmpyacc.Vw.VwWhRuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1,
        VectorOfLengthAndType<[2], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpy_Vw_VhRuh_sat :
    HLHVX_Op<
        "vdmpy.Vw.VhRuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Vw_VwVhRuh_sat :
    HLHVX_Op<
        "vdmpyacc.Vw.VwVhRuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[2], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpy_Vw_VhVh_sat :
    HLHVX_Op<
        "vdmpy.Vw.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdmpyacc_Vw_VwVhVh_sat :
    HLHVX_Op<
        "vdmpyacc.Vw.VwVhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vdsad_Wuw_WuhRuh :
    HLHVX_Op<
        "vdsad.Wuw.WuhRuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[2], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vdsadacc_Wuw_WuwWuhRuh :
    HLHVX_Op<
        "vdsadacc.Wuw.WuwWuhRuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[128], [UI16]>:$arg1,
        VectorOfLengthAndType<[2], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vcmp_eq_Q_VbVb :
    HLHVX_Op<
        "vcmp.eq.Q.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqand_Q_QVbVb :
    HLHVX_Op<
        "vcmp.eqand.Q.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqor_Q_QVbVb :
    HLHVX_Op<
        "vcmp.eqor.Q.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqxacc_Q_QVbVb :
    HLHVX_Op<
        "vcmp.eqxacc.Q.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eq_Q_VhVh :
    HLHVX_Op<
        "vcmp.eq.Q.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqand_Q_QVhVh :
    HLHVX_Op<
        "vcmp.eqand.Q.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqor_Q_QVhVh :
    HLHVX_Op<
        "vcmp.eqor.Q.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqxacc_Q_QVhVh :
    HLHVX_Op<
        "vcmp.eqxacc.Q.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eq_Q_VwVw :
    HLHVX_Op<
        "vcmp.eq.Q.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqand_Q_QVwVw :
    HLHVX_Op<
        "vcmp.eqand.Q.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqor_Q_QVwVw :
    HLHVX_Op<
        "vcmp.eqor.Q.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_eqxacc_Q_QVwVw :
    HLHVX_Op<
        "vcmp.eqxacc.Q.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VbVb :
    HLHVX_Op<
        "vcmp.gt.Q.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVbVb :
    HLHVX_Op<
        "vcmp.gtand.Q.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVbVb :
    HLHVX_Op<
        "vcmp.gtor.Q.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVbVb :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VhVh :
    HLHVX_Op<
        "vcmp.gt.Q.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVhVh :
    HLHVX_Op<
        "vcmp.gtand.Q.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVhVh :
    HLHVX_Op<
        "vcmp.gtor.Q.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVhVh :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VubVub :
    HLHVX_Op<
        "vcmp.gt.Q.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVubVub :
    HLHVX_Op<
        "vcmp.gtand.Q.QVubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVubVub :
    HLHVX_Op<
        "vcmp.gtor.Q.QVubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVubVub :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VuhVuh :
    HLHVX_Op<
        "vcmp.gt.Q.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVuhVuh :
    HLHVX_Op<
        "vcmp.gtand.Q.QVuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVuhVuh :
    HLHVX_Op<
        "vcmp.gtor.Q.QVuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVuhVuh :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VuwVuw :
    HLHVX_Op<
        "vcmp.gt.Q.VuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVuwVuw :
    HLHVX_Op<
        "vcmp.gtand.Q.QVuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1,
        VectorOfLengthAndType<[32], [UI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVuwVuw :
    HLHVX_Op<
        "vcmp.gtor.Q.QVuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1,
        VectorOfLengthAndType<[32], [UI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVuwVuw :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1,
        VectorOfLengthAndType<[32], [UI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VwVw :
    HLHVX_Op<
        "vcmp.gt.Q.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVwVw :
    HLHVX_Op<
        "vcmp.gtand.Q.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVwVw :
    HLHVX_Op<
        "vcmp.gtor.Q.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVwVw :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vinsert_Vw_VwR :
    HLHVX_Op<
        "vinsert.Vw.VwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vlalign_V_VVR :
    HLHVX_Op<
        "vlalign.V.VVR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vlalign_V_VVI :
    HLHVX_Op<
        "vlalign.V.VVI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vlsr_Vuh_VuhR :
    HLHVX_Op<
        "vlsr.Vuh.VuhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vlsr_Vh_VhVh :
    HLHVX_Op<
        "vlsr.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vlsr_Vuw_VuwR :
    HLHVX_Op<
        "vlsr.Vuw.VuwR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vlsr_Vw_VwVw :
    HLHVX_Op<
        "vlsr.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vlut32_Vb_VbVbR :
    HLHVX_Op<
        "vlut32.Vb.VbVbR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vlut32or_Vb_VbVbVbR :
    HLHVX_Op<
        "vlut32or.Vb.VbVbVbR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vlut16_Wh_VbVhR :
    HLHVX_Op<
        "vlut16.Wh.VbVhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vlut16or_Wh_WhVbVhR :
    HLHVX_Op<
        "vlut16or.Wh.WhVbVhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmax_Vh_VhVh :
    HLHVX_Op<
        "vmax.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmax_Vub_VubVub :
    HLHVX_Op<
        "vmax.Vub.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vmax_Vuh_VuhVuh :
    HLHVX_Op<
        "vmax.Vuh.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vmax_Vw_VwVw :
    HLHVX_Op<
        "vmax.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmin_Vh_VhVh :
    HLHVX_Op<
        "vmin.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmin_Vub_VubVub :
    HLHVX_Op<
        "vmin.Vub.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vmin_Vuh_VuhVuh :
    HLHVX_Op<
        "vmin.Vuh.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vmin_Vw_VwVw :
    HLHVX_Op<
        "vmin.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpa_Wh_WubRb :
    HLHVX_Op<
        "vmpa.Wh.WubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpaacc_Wh_WhWubRb :
    HLHVX_Op<
        "vmpaacc.Wh.WhWubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpa_Wh_WubWb :
    HLHVX_Op<
        "vmpa.Wh.WubWb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpa_Wh_WubWub :
    HLHVX_Op<
        "vmpa.Wh.WubWub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpa_Ww_WhRb :
    HLHVX_Op<
        "vmpa.Ww.WhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpaacc_Ww_WwWhRb :
    HLHVX_Op<
        "vmpaacc.Ww.WwWhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpy_Wh_VubRb :
    HLHVX_Op<
        "vmpy.Wh.VubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpyacc_Wh_WhVubRb :
    HLHVX_Op<
        "vmpyacc.Wh.WhVubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpy_Wh_VubVb :
    HLHVX_Op<
        "vmpy.Wh.VubVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpyacc_Wh_WhVubVb :
    HLHVX_Op<
        "vmpyacc.Wh.WhVubVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpy_Wh_VbVb :
    HLHVX_Op<
        "vmpy.Wh.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpyacc_Wh_WhVbVb :
    HLHVX_Op<
        "vmpyacc.Wh.WhVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpye_Vw_VwVuh :
    HLHVX_Op<
        "vmpye.Vw.VwVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpy_Ww_VhRh :
    HLHVX_Op<
        "vmpy.Ww.VhRh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpyacc_Ww_WwVhRh_sat :
    HLHVX_Op<
        "vmpyacc.Ww.WwVhRh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[2], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpy_Vh_VhRh_s1_rnd_sat :
    HLHVX_Op<
        "vmpy.Vh.VhRh.s1.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpy_Vh_VhRh_s1_sat :
    HLHVX_Op<
        "vmpy.Vh.VhRh.s1.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[2], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpy_Ww_VhVuh :
    HLHVX_Op<
        "vmpy.Ww.VhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpyacc_Ww_WwVhVuh :
    HLHVX_Op<
        "vmpyacc.Ww.WwVhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpy_Ww_VhVh :
    HLHVX_Op<
        "vmpy.Ww.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpyacc_Ww_WwVhVh :
    HLHVX_Op<
        "vmpyacc.Ww.WwVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpy_Vh_VhVh_s1_rnd_sat :
    HLHVX_Op<
        "vmpy.Vh.VhVh.s1.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpyieo_Vw_VhVh :
    HLHVX_Op<
        "vmpyieo.Vw.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyieacc_Vw_VwVwVh :
    HLHVX_Op<
        "vmpyieacc.Vw.VwVwVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyie_Vw_VwVuh :
    HLHVX_Op<
        "vmpyie.Vw.VwVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyieacc_Vw_VwVwVuh :
    HLHVX_Op<
        "vmpyieacc.Vw.VwVwVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyi_Vh_VhVh :
    HLHVX_Op<
        "vmpyi.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpyiacc_Vh_VhVhVh :
    HLHVX_Op<
        "vmpyiacc.Vh.VhVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpyi_Vh_VhRb :
    HLHVX_Op<
        "vmpyi.Vh.VhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpyiacc_Vh_VhVhRb :
    HLHVX_Op<
        "vmpyiacc.Vh.VhVhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpyio_Vw_VwVh :
    HLHVX_Op<
        "vmpyio.Vw.VwVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyi_Vw_VwRb :
    HLHVX_Op<
        "vmpyi.Vw.VwRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyiacc_Vw_VwVwRb :
    HLHVX_Op<
        "vmpyiacc.Vw.VwVwRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyi_Vw_VwRh :
    HLHVX_Op<
        "vmpyi.Vw.VwRh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[2], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyiacc_Vw_VwVwRh :
    HLHVX_Op<
        "vmpyiacc.Vw.VwVwRh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[2], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyo_Vw_VwVh_s1_sat :
    HLHVX_Op<
        "vmpyo.Vw.VwVh.s1.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyo_Vw_VwVh_s1_rnd_sat :
    HLHVX_Op<
        "vmpyo.Vw.VwVh.s1.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyoacc_Vw_VwVwVh_s1_rnd_sat_shift :
    HLHVX_Op<
        "vmpyoacc.Vw.VwVwVh.s1.rnd.sat.shift"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyoacc_Vw_VwVwVh_s1_sat_shift :
    HLHVX_Op<
        "vmpyoacc.Vw.VwVwVh.s1.sat.shift"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpy_Wuh_VubRub :
    HLHVX_Op<
        "vmpy.Wuh.VubRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vmpyacc_Wuh_WuhVubRub :
    HLHVX_Op<
        "vmpyacc.Wuh.WuhVubRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vmpy_Wuh_VubVub :
    HLHVX_Op<
        "vmpy.Wuh.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vmpyacc_Wuh_WuhVubVub :
    HLHVX_Op<
        "vmpyacc.Wuh.WuhVubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vmpy_Wuw_VuhRuh :
    HLHVX_Op<
        "vmpy.Wuw.VuhRuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[2], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vmpyacc_Wuw_WuwVuhRuh :
    HLHVX_Op<
        "vmpyacc.Wuw.WuwVuhRuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[2], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vmpy_Wuw_VuhVuh :
    HLHVX_Op<
        "vmpy.Wuw.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vmpyacc_Wuw_WuwVuhVuh :
    HLHVX_Op<
        "vmpyacc.Wuw.WuwVuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vmux_V_QVV :
    HLHVX_Op<
        "vmux.V.QVV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        VectorOfLengthAndType<[1024], [I1]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vnavg_Vh_VhVh :
    HLHVX_Op<
        "vnavg.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vnavg_Vb_VubVub :
    HLHVX_Op<
        "vnavg.Vb.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vnavg_Vw_VwVw :
    HLHVX_Op<
        "vnavg.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vnormamt_Vh_Vh :
    HLHVX_Op<
        "vnormamt.Vh.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vnormamt_Vw_Vw :
    HLHVX_Op<
        "vnormamt.Vw.Vw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vnot_V_V :
    HLHVX_Op<
        "vnot.V.V"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vor_V_VV :
    HLHVX_Op<
        "vor.V.VV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vpacke_Vb_VhVh :
    HLHVX_Op<
        "vpacke.Vb.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vpacke_Vh_VwVw :
    HLHVX_Op<
        "vpacke.Vh.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vpack_Vb_VhVh_sat :
    HLHVX_Op<
        "vpack.Vb.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vpack_Vub_VhVh_sat :
    HLHVX_Op<
        "vpack.Vub.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vpacko_Vb_VhVh :
    HLHVX_Op<
        "vpacko.Vb.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vpacko_Vh_VwVw :
    HLHVX_Op<
        "vpacko.Vh.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vpack_Vh_VwVw_sat :
    HLHVX_Op<
        "vpack.Vh.VwVw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vpack_Vuh_VwVw_sat :
    HLHVX_Op<
        "vpack.Vuh.VwVw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vpopcount_Vh_Vh :
    HLHVX_Op<
        "vpopcount.Vh.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vrdelta_V_VV :
    HLHVX_Op<
        "vrdelta.V.VV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vrmpy_Vw_VubRb :
    HLHVX_Op<
        "vrmpy.Vw.VubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vrmpyacc_Vw_VwVubRb :
    HLHVX_Op<
        "vrmpyacc.Vw.VwVubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vrmpy_Ww_WubRbI :
    HLHVX_Op<
        "vrmpy.Ww.WubRbI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vrmpyacc_Ww_WwWubRbI :
    HLHVX_Op<
        "vrmpyacc.Ww.WwWubRbI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vrmpy_Vw_VubVb :
    HLHVX_Op<
        "vrmpy.Vw.VubVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vrmpyacc_Vw_VwVubVb :
    HLHVX_Op<
        "vrmpyacc.Vw.VwVubVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vrmpy_Vw_VbVb :
    HLHVX_Op<
        "vrmpy.Vw.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vrmpyacc_Vw_VwVbVb :
    HLHVX_Op<
        "vrmpyacc.Vw.VwVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vrmpy_Vuw_VubRub :
    HLHVX_Op<
        "vrmpy.Vuw.VubRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vrmpyacc_Vuw_VuwVubRub :
    HLHVX_Op<
        "vrmpyacc.Vuw.VuwVubRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vrmpy_Wuw_WubRubI :
    HLHVX_Op<
        "vrmpy.Wuw.WubRubI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [UI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vrmpyacc_Wuw_WuwWubRubI :
    HLHVX_Op<
        "vrmpyacc.Wuw.WuwWubRubI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [UI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vrmpy_Vuw_VubVub :
    HLHVX_Op<
        "vrmpy.Vuw.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vrmpyacc_Vuw_VuwVubVub :
    HLHVX_Op<
        "vrmpyacc.Vuw.VuwVubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vror_V_VR :
    HLHVX_Op<
        "vror.V.VR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vround_Vb_VhVh_sat :
    HLHVX_Op<
        "vround.Vb.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vround_Vub_VhVh_sat :
    HLHVX_Op<
        "vround.Vub.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vround_Vh_VwVw_sat :
    HLHVX_Op<
        "vround.Vh.VwVw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vround_Vuh_VwVw_sat :
    HLHVX_Op<
        "vround.Vuh.VwVw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vrsad_Wuw_WubRubI :
    HLHVX_Op<
        "vrsad.Wuw.WubRubI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [UI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vrsadacc_Wuw_WuwWubRubI :
    HLHVX_Op<
        "vrsadacc.Wuw.WuwWubRubI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [UI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vsat_Vub_VhVh :
    HLHVX_Op<
        "vsat.Vub.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vsat_Vh_VwVw :
    HLHVX_Op<
        "vsat.Vh.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vsxt_Wh_Vb :
    HLHVX_Op<
        "vsxt.Wh.Vb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vsxt_Ww_Vh :
    HLHVX_Op<
        "vsxt.Ww.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vshuffe_Vh_VhVh :
    HLHVX_Op<
        "vshuffe.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vshuff_Vb_Vb :
    HLHVX_Op<
        "vshuff.Vb.Vb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vshuffe_Vb_VbVb :
    HLHVX_Op<
        "vshuffe.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vshuff_Vh_Vh :
    HLHVX_Op<
        "vshuff.Vh.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vshuffo_Vb_VbVb :
    HLHVX_Op<
        "vshuffo.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vshuff_W_VVR :
    HLHVX_Op<
        "vshuff.W.VVR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vshuffoe_Wb_VbVb :
    HLHVX_Op<
        "vshuffoe.Wb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [SI8]>:$result
    )>;

def HVX_vshuffoe_Wh_VhVh :
    HLHVX_Op<
        "vshuffoe.Wh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vshuffo_Vh_VhVh :
    HLHVX_Op<
        "vshuffo.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vsub_Vb_VbVb :
    HLHVX_Op<
        "vsub.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vsub_Wb_WbWb :
    HLHVX_Op<
        "vsub.Wb.WbWb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [SI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [SI8]>:$result
    )>;

def HVX_condnac_Vb_QnVbVb :
    HLHVX_Op<
        "condnac.Vb.QnVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_condnac_Vb_QVbVb :
    HLHVX_Op<
        "condnac.Vb.QVbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vsub_Vh_VhVh :
    HLHVX_Op<
        "vsub.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vsub_Wh_WhWh :
    HLHVX_Op<
        "vsub.Wh.WhWh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_condnac_Vh_QnVhVh :
    HLHVX_Op<
        "condnac.Vh.QnVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_condnac_Vh_QVhVh :
    HLHVX_Op<
        "condnac.Vh.QVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vsub_Vh_VhVh_sat :
    HLHVX_Op<
        "vsub.Vh.VhVh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vsub_Wh_WhWh_sat :
    HLHVX_Op<
        "vsub.Wh.WhWh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vsub_Ww_VhVh :
    HLHVX_Op<
        "vsub.Ww.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vsub_Wh_VubVub :
    HLHVX_Op<
        "vsub.Wh.VubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vsub_Vub_VubVub_sat :
    HLHVX_Op<
        "vsub.Vub.VubVub.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vsub_Wub_WubWub_sat :
    HLHVX_Op<
        "vsub.Wub.WubWub.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [UI8]>:$result
    )>;

def HVX_vsub_Vuh_VuhVuh_sat :
    HLHVX_Op<
        "vsub.Vuh.VuhVuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vsub_Wuh_WuhWuh_sat :
    HLHVX_Op<
        "vsub.Wuh.WuhWuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vsub_Ww_VuhVuh :
    HLHVX_Op<
        "vsub.Ww.VuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vsub_Vw_VwVw :
    HLHVX_Op<
        "vsub.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vsub_Ww_WwWw :
    HLHVX_Op<
        "vsub.Ww.WwWw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_condnac_Vw_QnVwVw :
    HLHVX_Op<
        "condnac.Vw.QnVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_condnac_Vw_QVwVw :
    HLHVX_Op<
        "condnac.Vw.QVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vsub_Vw_VwVw_sat :
    HLHVX_Op<
        "vsub.Vw.VwVw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vsub_Ww_WwWw_sat :
    HLHVX_Op<
        "vsub.Ww.WwWw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vswap_W_QVV :
    HLHVX_Op<
        "vswap.W.QVV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1,
        VectorOfLengthAndType<[1024], [I1]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vtmpy_Wh_WbRb :
    HLHVX_Op<
        "vtmpy.Wh.WbRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [SI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vtmpyacc_Wh_WhWbRb :
    HLHVX_Op<
        "vtmpyacc.Wh.WhWbRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vtmpy_Wh_WubRb :
    HLHVX_Op<
        "vtmpy.Wh.WubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vtmpyacc_Wh_WhWubRb :
    HLHVX_Op<
        "vtmpyacc.Wh.WhWubRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vtmpy_Ww_WhRb :
    HLHVX_Op<
        "vtmpy.Ww.WhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vtmpyacc_Ww_WwWhRb :
    HLHVX_Op<
        "vtmpyacc.Ww.WwWhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [SI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vunpack_Wh_Vb :
    HLHVX_Op<
        "vunpack.Wh.Vb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vunpack_Ww_Vh :
    HLHVX_Op<
        "vunpack.Ww.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vunpackoor_Wh_WhVb :
    HLHVX_Op<
        "vunpackoor.Wh.WhVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vunpackoor_Ww_WwVh :
    HLHVX_Op<
        "vunpackoor.Ww.WwVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vunpack_Wuh_Vub :
    HLHVX_Op<
        "vunpack.Wuh.Vub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vunpack_Wuw_Vuh :
    HLHVX_Op<
        "vunpack.Wuw.Vuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vxor_V_VV :
    HLHVX_Op<
        "vxor.V.VV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vzxt_Wuh_Vub :
    HLHVX_Op<
        "vzxt.Wuh.Vub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI16]>:$result
    )>;

def HVX_vzxt_Wuw_Vuh :
    HLHVX_Op<
        "vzxt.Wuw.Vuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vsplat_Vb_R :
    HLHVX_Op<
        "vsplat.Vb.R"
    >,
    Arguments<(ins
        AnyI32:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vsplat_Vh_R :
    HLHVX_Op<
        "vsplat.Vh.R"
    >,
    Arguments<(ins
        AnyI32:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vsetq2_Q_R :
    HLHVX_Op<
        "vsetq2.Q.R"
    >,
    Arguments<(ins
        AnyI32:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vshuffe_Qb_QhQh :
    HLHVX_Op<
        "vshuffe.Qb.QhQh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vshuffe_Qh_QwQw :
    HLHVX_Op<
        "vshuffe.Qh.QwQw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vadd_Vb_VbVb_sat :
    HLHVX_Op<
        "vadd.Vb.VbVb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vadd_Wb_WbWb_sat :
    HLHVX_Op<
        "vadd.Wb.WbWb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [SI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [SI8]>:$result
    )>;

def HVX_vadd_Vw_VwVwQ_carry :
    HLHVX_Op<
        "vadd.Vw.VwVwQ.carry"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[128], [I1]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vadd_vclb_Vh_VhVh :
    HLHVX_Op<
        "vadd.vclb.Vh.VhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vadd_vclb_Vw_VwVw :
    HLHVX_Op<
        "vadd.vclb.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vaddacc_Ww_WwVhVh :
    HLHVX_Op<
        "vaddacc.Ww.WwVhVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vaddacc_Wh_WhVubVub :
    HLHVX_Op<
        "vaddacc.Wh.WhVubVub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1,
        VectorOfLengthAndType<[128], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vadd_Vub_VubVb_sat :
    HLHVX_Op<
        "vadd.Vub.VubVb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vaddacc_Ww_WwVuhVuh :
    HLHVX_Op<
        "vaddacc.Ww.WwVuhVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[64], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vadd_Vuw_VuwVuw_sat :
    HLHVX_Op<
        "vadd.Vuw.VuwVuw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vadd_Wuw_WuwWuw_sat :
    HLHVX_Op<
        "vadd.Wuw.WuwWuw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vand_V_QnR :
    HLHVX_Op<
        "vand.V.QnR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vandor_V_VQnR :
    HLHVX_Op<
        "vandor.V.VQnR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[1024], [I1]>:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vand_V_QnV :
    HLHVX_Op<
        "vand.V.QnV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vand_V_QV :
    HLHVX_Op<
        "vand.V.QV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[1024], [I1]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[1024], [I1]>:$result
    )>;

def HVX_vasr_Vb_VhVhR_sat :
    HLHVX_Op<
        "vasr.Vb.VhVhR.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vasr_Vuh_VuwVuwR_rnd_sat :
    HLHVX_Op<
        "vasr.Vuh.VuwVuwR.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vasr_Vuh_VwVwR_rnd_sat :
    HLHVX_Op<
        "vasr.Vuh.VwVwR.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vlsr_Vub_VubR :
    HLHVX_Op<
        "vlsr.Vub.VubR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        AnyI32:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vlut32_Vb_VbVbR_nomatch :
    HLHVX_Op<
        "vlut32.Vb.VbVbR.nomatch"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vlut32or_Vb_VbVbVbI :
    HLHVX_Op<
        "vlut32or.Vb.VbVbVbI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[128], [SI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vlut32_Vb_VbVbI :
    HLHVX_Op<
        "vlut32.Vb.VbVbI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vlut16_Wh_VbVhR_nomatch :
    HLHVX_Op<
        "vlut16.Wh.VbVhR.nomatch"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vlut16or_Wh_WhVbVhI :
    HLHVX_Op<
        "vlut16or.Wh.WhVbVhI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vlut16_Wh_VbVhI :
    HLHVX_Op<
        "vlut16.Wh.VbVhI"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmax_Vb_VbVb :
    HLHVX_Op<
        "vmax.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vmin_Vb_VbVb :
    HLHVX_Op<
        "vmin.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vmpa_Ww_WuhRb :
    HLHVX_Op<
        "vmpa.Ww.WuhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpaacc_Ww_WwWuhRb :
    HLHVX_Op<
        "vmpaacc.Ww.WwWuhRb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[128], [UI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpye_W_VwVuh :
    HLHVX_Op<
        "vmpye.W.VwVuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vmpyi_Vw_VwRub :
    HLHVX_Op<
        "vmpyi.Vw.VwRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[4], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyiacc_Vw_VwVwRub :
    HLHVX_Op<
        "vmpyiacc.Vw.VwVwRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[4], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vmpyoacc_W_WVwVh :
    HLHVX_Op<
        "vmpyoacc.W.WVwVh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[2048], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vround_Vub_VuhVuh_sat :
    HLHVX_Op<
        "vround.Vub.VuhVuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vround_Vuh_VuwVuw_sat :
    HLHVX_Op<
        "vround.Vuh.VuwVuw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vsat_Vuh_VuwVuw :
    HLHVX_Op<
        "vsat.Vuh.VuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vsub_Vb_VbVb_sat :
    HLHVX_Op<
        "vsub.Vb.VbVb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vsub_Wb_WbWb_sat :
    HLHVX_Op<
        "vsub.Wb.WbWb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [SI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[256], [SI8]>:$result
    )>;

def HVX_vsub_Vw_VwVwQ_carry :
    HLHVX_Op<
        "vsub.Vw.VwVwQ.carry"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[128], [I1]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vsub_Vub_VubVb_sat :
    HLHVX_Op<
        "vsub.Vub.VubVb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vsub_Vuw_VuwVuw_sat :
    HLHVX_Op<
        "vsub.Vuw.VuwVuw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vsub_Wuw_WuwWuw_sat :
    HLHVX_Op<
        "vsub.Wuw.WuwWuw.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI32]>:$result
    )>;

def HVX_vabs_Vb_Vb :
    HLHVX_Op<
        "vabs.Vb.Vb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vabs_Vb_Vb_sat :
    HLHVX_Op<
        "vabs.Vb.Vb.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vaslacc_Vh_VhVhR :
    HLHVX_Op<
        "vaslacc.Vh.VhVhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasracc_Vh_VhVhR :
    HLHVX_Op<
        "vasracc.Vh.VhVhR"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vasr_Vub_VuhVuhR_rnd_sat :
    HLHVX_Op<
        "vasr.Vub.VuhVuhR.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vasr_Vub_VuhVuhR_sat :
    HLHVX_Op<
        "vasr.Vub.VuhVuhR.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vasr_Vuh_VuwVuwR_sat :
    HLHVX_Op<
        "vasr.Vuh.VuwVuwR.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vavg_Vb_VbVb :
    HLHVX_Op<
        "vavg.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vavg_Vb_VbVb_rnd :
    HLHVX_Op<
        "vavg.Vb.VbVb.rnd"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vavg_Vuw_VuwVuw :
    HLHVX_Op<
        "vavg.Vuw.VuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vavg_Vuw_VuwVuw_rnd :
    HLHVX_Op<
        "vavg.Vuw.VuwVuw.rnd"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vzero_W :
    HLHVX_Op<
        "vzero.W"
    >,
    Results<(outs
        VectorOfLengthAndType<[2048], [I1]>:$result
    )>;

def HVX_vgather_ARMVh :
    HLHVX_Op<
        "vgather.ARMVh"
    >,
    Arguments<(ins
        I8MemRef:$arg0,
        AnyI32:$arg1,
        AnyI32:$arg2,
        VectorOfLengthAndType<[64], [SI16]>:$arg3
    )>;

def HVX_vgather_AQRMVh :
    HLHVX_Op<
        "vgather.AQRMVh"
    >,
    Arguments<(ins
        I8MemRef:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1,
        AnyI32:$arg2,
        AnyI32:$arg3,
        VectorOfLengthAndType<[64], [SI16]>:$arg4
    )>;

def HVX_vgather_ARMWw :
    HLHVX_Op<
        "vgather.ARMWw"
    >,
    Arguments<(ins
        I8MemRef:$arg0,
        AnyI32:$arg1,
        AnyI32:$arg2,
        VectorOfLengthAndType<[64], [SI32]>:$arg3
    )>;

def HVX_vgather_AQRMWw :
    HLHVX_Op<
        "vgather.AQRMWw"
    >,
    Arguments<(ins
        I8MemRef:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1,
        AnyI32:$arg2,
        AnyI32:$arg3,
        VectorOfLengthAndType<[64], [SI32]>:$arg4
    )>;

def HVX_vgather_ARMVw :
    HLHVX_Op<
        "vgather.ARMVw"
    >,
    Arguments<(ins
        I8MemRef:$arg0,
        AnyI32:$arg1,
        AnyI32:$arg2,
        VectorOfLengthAndType<[32], [SI32]>:$arg3
    )>;

def HVX_vgather_AQRMVw :
    HLHVX_Op<
        "vgather.AQRMVw"
    >,
    Arguments<(ins
        I8MemRef:$arg0,
        VectorOfLengthAndType<[128], [I1]>:$arg1,
        AnyI32:$arg2,
        AnyI32:$arg3,
        VectorOfLengthAndType<[32], [SI32]>:$arg4
    )>;

def HVX_vlut4_Vh_VuhPh :
    HLHVX_Op<
        "vlut4.Vh.VuhPh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[4], [SI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpa_Wh_WubRub :
    HLHVX_Op<
        "vmpa.Wh.WubRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[4], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpaacc_Wh_WhWubRub :
    HLHVX_Op<
        "vmpaacc.Wh.WhWubRub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI16]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[4], [UI8]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI16]>:$result
    )>;

def HVX_vmpa_Vh_VhVhVhPh_sat :
    HLHVX_Op<
        "vmpa.Vh.VhVhVhPh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[4], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpa_Vh_VhVhVuhPuh_sat :
    HLHVX_Op<
        "vmpa.Vh.VhVhVuhPuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[4], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmps_Vh_VhVhVuhPuh_sat :
    HLHVX_Op<
        "vmps.Vh.VhVhVuhPuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[4], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vmpyacc_Ww_WwVhRh :
    HLHVX_Op<
        "vmpyacc.Ww.WwVhRh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [SI16]>:$arg1,
        VectorOfLengthAndType<[2], [SI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vmpye_Vuw_VuhRuh :
    HLHVX_Op<
        "vmpye.Vuw.VuhRuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[2], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vmpyeacc_Vuw_VuwVuhRuh :
    HLHVX_Op<
        "vmpyeacc.Vuw.VuwVuhRuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1,
        VectorOfLengthAndType<[2], [UI16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vnavg_Vb_VbVb :
    HLHVX_Op<
        "vnavg.Vb.VbVb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0,
        VectorOfLengthAndType<[128], [SI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_prefixsum_Vb_Q :
    HLHVX_Op<
        "prefixsum.Vb.Q"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_prefixsum_Vh_Q :
    HLHVX_Op<
        "prefixsum.Vh.Q"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_prefixsum_Vw_Q :
    HLHVX_Op<
        "prefixsum.Vw.Q"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vscatter_RMVhV :
    HLHVX_Op<
        "vscatter.RMVhV"
    >,
    Arguments<(ins
        AnyI32:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2,
        VectorOfLengthAndType<[1024], [I1]>:$arg3
    )>;

def HVX_vscatteracc_RMVhV :
    HLHVX_Op<
        "vscatteracc.RMVhV"
    >,
    Arguments<(ins
        AnyI32:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[64], [SI16]>:$arg2,
        VectorOfLengthAndType<[1024], [I1]>:$arg3
    )>;

def HVX_vscatter_QRMVhV :
    HLHVX_Op<
        "vscatter.QRMVhV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        AnyI32:$arg2,
        VectorOfLengthAndType<[64], [SI16]>:$arg3,
        VectorOfLengthAndType<[1024], [I1]>:$arg4
    )>;

def HVX_vscatter_RMWwV :
    HLHVX_Op<
        "vscatter.RMWwV"
    >,
    Arguments<(ins
        AnyI32:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[64], [SI32]>:$arg2,
        VectorOfLengthAndType<[1024], [I1]>:$arg3
    )>;

def HVX_vscatteracc_RMWwV :
    HLHVX_Op<
        "vscatteracc.RMWwV"
    >,
    Arguments<(ins
        AnyI32:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[64], [SI32]>:$arg2,
        VectorOfLengthAndType<[1024], [I1]>:$arg3
    )>;

def HVX_vscatter_QRMWwV :
    HLHVX_Op<
        "vscatter.QRMWwV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        AnyI32:$arg2,
        VectorOfLengthAndType<[64], [SI32]>:$arg3,
        VectorOfLengthAndType<[1024], [I1]>:$arg4
    )>;

def HVX_vscatter_RMVwV :
    HLHVX_Op<
        "vscatter.RMVwV"
    >,
    Arguments<(ins
        AnyI32:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2,
        VectorOfLengthAndType<[1024], [I1]>:$arg3
    )>;

def HVX_vscatteracc_RMVwV :
    HLHVX_Op<
        "vscatteracc.RMVwV"
    >,
    Arguments<(ins
        AnyI32:$arg0,
        AnyI32:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2,
        VectorOfLengthAndType<[1024], [I1]>:$arg3
    )>;

def HVX_vscatter_QRMVwV :
    HLHVX_Op<
        "vscatter.QRMVwV"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        AnyI32:$arg1,
        AnyI32:$arg2,
        VectorOfLengthAndType<[32], [SI32]>:$arg3,
        VectorOfLengthAndType<[1024], [I1]>:$arg4
    )>;

def HVX_vadd_Vw_VwVwQ_carry_sat :
    HLHVX_Op<
        "vadd.Vw.VwVwQ.carry.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[128], [I1]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vasrinto_Ww_WwVwVw :
    HLHVX_Op<
        "vasrinto.Ww.WwVwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1,
        VectorOfLengthAndType<[32], [SI32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vrotr_Vuw_VuwVuw :
    HLHVX_Op<
        "vrotr.Vuw.VuwVuw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [UI32]>:$arg0,
        VectorOfLengthAndType<[32], [UI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [UI32]>:$result
    )>;

def HVX_vsatdw_Vw_VwVw :
    HLHVX_Op<
        "vsatdw.Vw.VwVw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0,
        VectorOfLengthAndType<[32], [SI32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_v6mpy_Ww_WubWbI_h :
    HLHVX_Op<
        "v6mpy.Ww.WubWbI.h"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_v6mpyacc_Ww_WwWubWbI_h :
    HLHVX_Op<
        "v6mpyacc.Ww.WwWubWbI.h"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[256], [SI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_v6mpy_Ww_WubWbI_v :
    HLHVX_Op<
        "v6mpy.Ww.WubWbI.v"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[256], [UI8]>:$arg0,
        VectorOfLengthAndType<[256], [SI8]>:$arg1,
        AnyI32:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_v6mpyacc_Ww_WwWubWbI_v :
    HLHVX_Op<
        "v6mpyacc.Ww.WwWubWbI.v"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[256], [UI8]>:$arg1,
        VectorOfLengthAndType<[256], [SI8]>:$arg2,
        AnyI32:$arg3
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI32]>:$result
    )>;

def HVX_vabs_Vhf_Vhf :
    HLHVX_Op<
        "vabs.Vhf.Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vabs_Vsf_Vsf :
    HLHVX_Op<
        "vabs.Vsf.Vsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vadd_Vqf16_VhfVhf :
    HLHVX_Op<
        "vadd.Vqf16.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vadd_Vhf_VhfVhf :
    HLHVX_Op<
        "vadd.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vadd_Vqf16_Vqf16Vqf16 :
    HLHVX_Op<
        "vadd.Vqf16.Vqf16Vqf16"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vadd_Vqf16_Vqf16Vhf :
    HLHVX_Op<
        "vadd.Vqf16.Vqf16Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vadd_Vqf32_Vqf32Vqf32 :
    HLHVX_Op<
        "vadd.Vqf32.Vqf32Vqf32"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vadd_Vqf32_Vqf32Vsf :
    HLHVX_Op<
        "vadd.Vqf32.Vqf32Vsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vadd_Vqf32_VsfVsf :
    HLHVX_Op<
        "vadd.Vqf32.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vadd_Wsf_VhfVhf :
    HLHVX_Op<
        "vadd.Wsf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vadd_Vsf_VsfVsf :
    HLHVX_Op<
        "vadd.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vfmv_Vw_Vw :
    HLHVX_Op<
        "vfmv.Vw.Vw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_equals_Vhf_Vqf16 :
    HLHVX_Op<
        "equals.Vhf.Vqf16"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_equals_Vhf_Wqf32 :
    HLHVX_Op<
        "equals.Vhf.Wqf32"
    >,
    Arguments<(ins
        VectorPairOfQf32:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_equals_Vsf_Vqf32 :
    HLHVX_Op<
        "equals.Vsf.Vqf32"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vcvt_Vb_VhfVhf :
    HLHVX_Op<
        "vcvt.Vb.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [SI8]>:$result
    )>;

def HVX_vcvt_Vh_Vhf :
    HLHVX_Op<
        "vcvt.Vh.Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_vcvt_Whf_Vb :
    HLHVX_Op<
        "vcvt.Whf.Vb"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [SI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [F16]>:$result
    )>;

def HVX_vcvt_Vhf_Vh :
    HLHVX_Op<
        "vcvt.Vhf.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vcvt_Vhf_VsfVsf :
    HLHVX_Op<
        "vcvt.Vhf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vcvt_Whf_Vub :
    HLHVX_Op<
        "vcvt.Whf.Vub"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI8]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [F16]>:$result
    )>;

def HVX_vcvt_Vhf_Vuh :
    HLHVX_Op<
        "vcvt.Vhf.Vuh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vcvt_Wsf_Vhf :
    HLHVX_Op<
        "vcvt.Wsf.Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vcvt_Vub_VhfVhf :
    HLHVX_Op<
        "vcvt.Vub.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vcvt_Vuh_Vhf :
    HLHVX_Op<
        "vcvt.Vuh.Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vdmpy_Vsf_VhfVhf :
    HLHVX_Op<
        "vdmpy.Vsf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vdmpyacc_Vsf_VsfVhfVhf :
    HLHVX_Op<
        "vdmpyacc.Vsf.VsfVhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1,
        VectorOfLengthAndType<[64], [F16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vfmax_Vhf_VhfVhf :
    HLHVX_Op<
        "vfmax.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vfmax_Vsf_VsfVsf :
    HLHVX_Op<
        "vfmax.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vfmin_Vhf_VhfVhf :
    HLHVX_Op<
        "vfmin.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vfmin_Vsf_VsfVsf :
    HLHVX_Op<
        "vfmin.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vfneg_Vhf_Vhf :
    HLHVX_Op<
        "vfneg.Vhf.Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vfneg_Vsf_Vsf :
    HLHVX_Op<
        "vfneg.Vsf.Vsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vcmp_gt_Q_VhfVhf :
    HLHVX_Op<
        "vcmp.gt.Q.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVhfVhf :
    HLHVX_Op<
        "vcmp.gtand.Q.QVhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1,
        VectorOfLengthAndType<[64], [F16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVhfVhf :
    HLHVX_Op<
        "vcmp.gtor.Q.QVhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1,
        VectorOfLengthAndType<[64], [F16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVhfVhf :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1,
        VectorOfLengthAndType<[64], [F16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gt_Q_VsfVsf :
    HLHVX_Op<
        "vcmp.gt.Q.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVsfVsf :
    HLHVX_Op<
        "vcmp.gtand.Q.QVsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1,
        VectorOfLengthAndType<[32], [F32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVsfVsf :
    HLHVX_Op<
        "vcmp.gtor.Q.QVsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1,
        VectorOfLengthAndType<[32], [F32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVsfVsf :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1,
        VectorOfLengthAndType<[32], [F32]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vmax_Vhf_VhfVhf :
    HLHVX_Op<
        "vmax.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmax_Vsf_VsfVsf :
    HLHVX_Op<
        "vmax.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vmin_Vhf_VhfVhf :
    HLHVX_Op<
        "vmin.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmin_Vsf_VsfVsf :
    HLHVX_Op<
        "vmin.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vmpy_Vhf_VhfVhf :
    HLHVX_Op<
        "vmpy.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmpyacc_Vhf_VhfVhfVhf :
    HLHVX_Op<
        "vmpyacc.Vhf.VhfVhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1,
        VectorOfLengthAndType<[64], [F16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmpy_Vqf16_Vqf16Vqf16 :
    HLHVX_Op<
        "vmpy.Vqf16.Vqf16Vqf16"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmpy_Vqf16_VhfVhf :
    HLHVX_Op<
        "vmpy.Vqf16.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmpy_Vqf16_Vqf16Vhf :
    HLHVX_Op<
        "vmpy.Vqf16.Vqf16Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vmpy_Vqf32_Vqf32Vqf32 :
    HLHVX_Op<
        "vmpy.Vqf32.Vqf32Vqf32"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vmpy_Wqf32_VhfVhf :
    HLHVX_Op<
        "vmpy.Wqf32.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorPairOfQf32:$result
    )>;

def HVX_vmpy_Wqf32_Vqf16Vhf :
    HLHVX_Op<
        "vmpy.Wqf32.Vqf16Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorPairOfQf32:$result
    )>;

def HVX_vmpy_Wqf32_Vqf16Vqf16 :
    HLHVX_Op<
        "vmpy.Wqf32.Vqf16Vqf16"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorPairOfQf32:$result
    )>;

def HVX_vmpy_Vqf32_VsfVsf :
    HLHVX_Op<
        "vmpy.Vqf32.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vmpy_Wsf_VhfVhf :
    HLHVX_Op<
        "vmpy.Wsf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vmpyacc_Wsf_WsfVhfVhf :
    HLHVX_Op<
        "vmpyacc.Wsf.WsfVhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F32]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1,
        VectorOfLengthAndType<[64], [F16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vmpy_Vsf_VsfVsf :
    HLHVX_Op<
        "vmpy.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vsub_Vqf16_VhfVhf :
    HLHVX_Op<
        "vsub.Vqf16.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vsub_Vhf_VhfVhf :
    HLHVX_Op<
        "vsub.Vhf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vsub_Vqf16_Vqf16Vqf16 :
    HLHVX_Op<
        "vsub.Vqf16.Vqf16Vqf16"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vsub_Vqf16_Vqf16Vhf :
    HLHVX_Op<
        "vsub.Vqf16.Vqf16Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_vsub_Vqf32_Vqf32Vqf32 :
    HLHVX_Op<
        "vsub.Vqf32.Vqf32Vqf32"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vsub_Vqf32_Vqf32Vsf :
    HLHVX_Op<
        "vsub.Vqf32.Vqf32Vsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vsub_Vqf32_VsfVsf :
    HLHVX_Op<
        "vsub.Vqf32.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vsub_Wsf_VhfVhf :
    HLHVX_Op<
        "vsub.Wsf.VhfVhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0,
        VectorOfLengthAndType<[64], [F16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vsub_Vsf_VsfVsf :
    HLHVX_Op<
        "vsub.Vsf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_vasr_Vub_WuhVub_rnd_sat :
    HLHVX_Op<
        "vasr.Vub.WuhVub.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vasr_Vub_WuhVub_sat :
    HLHVX_Op<
        "vasr.Vub.WuhVub.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [UI16]>:$arg0,
        VectorOfLengthAndType<[128], [UI8]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [UI8]>:$result
    )>;

def HVX_vasr_Vuh_WwVuh_rnd_sat :
    HLHVX_Op<
        "vasr.Vuh.WwVuh.rnd.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vasr_Vuh_WwVuh_sat :
    HLHVX_Op<
        "vasr.Vuh.WwVuh.sat"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI32]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vmpy_Vuh_VuhVuh_rs16 :
    HLHVX_Op<
        "vmpy.Vuh.VuhVuh.rs16"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [UI16]>:$arg0,
        VectorOfLengthAndType<[64], [UI16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [UI16]>:$result
    )>;

def HVX_vadd_Wsf_VbfVbf :
    HLHVX_Op<
        "vadd.Wsf.VbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [BF16]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_equals_Vh_Vhf :
    HLHVX_Op<
        "equals.Vh.Vhf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [SI16]>:$result
    )>;

def HVX_equals_Vhf_Vh :
    HLHVX_Op<
        "equals.Vhf.Vh"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [SI16]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F16]>:$result
    )>;

def HVX_equals_Vsf_Vw :
    HLHVX_Op<
        "equals.Vsf.Vw"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [SI32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [F32]>:$result
    )>;

def HVX_equals_Vw_Vsf :
    HLHVX_Op<
        "equals.Vw.Vsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0
    )>,
    Results<(outs
        VectorOfLengthAndType<[32], [SI32]>:$result
    )>;

def HVX_vcvt_Vbf_VsfVsf :
    HLHVX_Op<
        "vcvt.Vbf.VsfVsf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[32], [F32]>:$arg0,
        VectorOfLengthAndType<[32], [F32]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [BF16]>:$result
    )>;

def HVX_vcmp_gt_Q_VbfVbf :
    HLHVX_Op<
        "vcmp.gt.Q.VbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [BF16]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtand_Q_QVbfVbf :
    HLHVX_Op<
        "vcmp.gtand.Q.QVbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1,
        VectorOfLengthAndType<[64], [BF16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtor_Q_QVbfVbf :
    HLHVX_Op<
        "vcmp.gtor.Q.QVbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1,
        VectorOfLengthAndType<[64], [BF16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vcmp_gtxacc_Q_QVbfVbf :
    HLHVX_Op<
        "vcmp.gtxacc.Q.QVbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[128], [I1]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1,
        VectorOfLengthAndType<[64], [BF16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[128], [I1]>:$result
    )>;

def HVX_vmax_Vbf_VbfVbf :
    HLHVX_Op<
        "vmax.Vbf.VbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [BF16]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [BF16]>:$result
    )>;

def HVX_vmin_Vbf_VbfVbf :
    HLHVX_Op<
        "vmin.Vbf.VbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [BF16]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [BF16]>:$result
    )>;

def HVX_vmpy_Wsf_VbfVbf :
    HLHVX_Op<
        "vmpy.Wsf.VbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [BF16]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vmpyacc_Wsf_WsfVbfVbf :
    HLHVX_Op<
        "vmpyacc.Wsf.WsfVbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [F32]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1,
        VectorOfLengthAndType<[64], [BF16]>:$arg2
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

def HVX_vsub_Wsf_VbfVbf :
    HLHVX_Op<
        "vsub.Wsf.VbfVbf"
    >,
    Arguments<(ins
        VectorOfLengthAndType<[64], [BF16]>:$arg0,
        VectorOfLengthAndType<[64], [BF16]>:$arg1
    )>,
    Results<(outs
        VectorOfLengthAndType<[64], [F32]>:$result
    )>;

